{
  
    
        "post0": {
            "title": "P3 4/27 Big Idea 3 Data Structures",
            "content": "Leaderboard Database . How do you set up a database model? . What is a database model . A database model shows the _logical structure of a database | It fundamentally determines in which manner data can be _stored, organized, and manipulative__ | Some popular database models are relational models, object oriented models, hierarchial models, flat file models, and network models | The one below is an Object-Relational Model which is a combination of a relational model and an object oriented_ model | . Creating SQLAlchemy App . from flask import Flask from flask_sqlalchemy import SQLAlchemy # Setup of key Flask object (app) app = Flask(__name__) # Setup SQLAlchemy object and properties for the database (db) app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = &#39;sqlite:///sqlite.db&#39; app.config[&quot;SQLALCHEMY_TRACK_MODIFICATIONS&quot;] = False app.config[&quot;SECRET_KEY&quot;] = &quot;SECRET_KEY&quot; db = SQLAlchemy(app) # Images storage app.config[&quot;MAX_CONTENT_LENGTH&quot;] = 5 * 1024 * 1024 # maximum size of uploaded content app.config[&quot;UPLOAD_EXTENSIONS&quot;] = [&quot;.jpg&quot;, &quot;.png&quot;, &quot;.gif&quot;] # supported file types app.config[&quot;UPLOAD_FOLDER&quot;] = &quot;volumes/uploads/&quot; # location of user uploaded content . ModuleNotFoundError Traceback (most recent call last) /Users/linaalsheikh-eid/vscode/linas-fastpages/_notebooks/lesson student.ipynb Cell 4 in &lt;cell line: 1&gt;() -&gt; &lt;a href=&#39;vscode-notebook-cell:/Users/linaalsheikh-eid/vscode/linas-fastpages/_notebooks/lesson%20student.ipynb#W3sZmlsZQ%3D%3D?line=0&#39;&gt;1&lt;/a&gt; from flask import Flask &lt;a href=&#39;vscode-notebook-cell:/Users/linaalsheikh-eid/vscode/linas-fastpages/_notebooks/lesson%20student.ipynb#W3sZmlsZQ%3D%3D?line=1&#39;&gt;2&lt;/a&gt; from flask_sqlalchemy import SQLAlchemy &lt;a href=&#39;vscode-notebook-cell:/Users/linaalsheikh-eid/vscode/linas-fastpages/_notebooks/lesson%20student.ipynb#W3sZmlsZQ%3D%3D?line=3&#39;&gt;4&lt;/a&gt; # Setup of key Flask object (app) ModuleNotFoundError: No module named &#39;flask&#39; . Creating Database Template . from sqlalchemy import Column, Integer, String, Text from sqlalchemy.exc import IntegrityError import json from werkzeug.security import generate_password_hash, check_password_hash # # Leaderboard DB class that maps leaderboard SQL table # class Leaderboard(db.Model): __tablename__ = &quot;leaderboard&quot; # # Leaderboard DB columns for easy, medium and hard points with user info # id = Column(Integer, primary_key=True) _username = Column(String(255), unique=True, nullable=False) _password = Column(String(255), nullable=False) _pointsEasy = Column(Integer, nullable=False) _pointsMedium = Column(Integer, nullable=False) _pointsHard = Column(Integer, nullable=False) # # Leaderboard DB class constructor # def __init__(self, username, password, pointsEasy, pointsMedium, pointsHard): self._username = username self.set_password(password) self._pointsEasy = pointsEasy self._pointsMedium = pointsMedium self._pointsHard = pointsHard # # Leaderboard DB class string representation of an object # def __repr__(self): return &quot;&lt;Leaderboard(id=&#39;%s&#39;, username=&#39;%s&#39;, pointsEasy=&#39;%s&#39;, pointsMedium=&#39;%s&#39;, pointsHard=&#39;%s&#39;)&gt;&quot; % ( self.id, self.username, self.pointsEasy, self.pointsMedium, self.pointsHard, ) # # Returns Leaderboard username # @property def username(self): return self._username # # Sets Leaderboard username # @username.setter def username(self, value): self._username = value # # checks Leaderboard username valid # def is_username(self, username): return self._username == username # # Returns Leaderboard easy points # @property def pointsEasy(self): return self._pointsEasy # # Sets Leaderboard easy points # @pointsEasy.setter def pointsEasy(self, value): self._pointsEasy = value # # Sets Leaderboard medium points # @property def pointsMedium(self): return self._pointsMedium # # Sets Leaderboard medium points # @pointsMedium.setter def pointsMedium(self, value): self._pointsMedium = value # # Returns Leaderboard hard points # @property def pointsHard(self): return self._pointsHard # # Sets Leaderboard hard points # @pointsHard.setter def pointsHard(self, value): self._pointsHard = value # # Returns Leaderboard password # @property def password(self): return self._password[0:10] + &quot;...&quot; # # Sets Leaderboard password # def set_password(self, password): self._password = generate_password_hash(password, method=&#39;sha512&#39;) # # Checks Leaderboard password validity # def is_password(self, password): result = check_password_hash(self._password, password) if result: return True else: return False # # Converts Leaderboard to dictionary # def to_dict(self): return {&quot;id&quot;: self.id, &quot;username&quot;: self.username, &quot;password&quot;: self.password, &quot;pointsEasy&quot;: self._pointsEasy, &quot;pointsMedium&quot;: self._pointsMedium, &quot;pointsHard&quot;: self._pointsHard} # # Converts Leaderboard to string values # def __str__(self): return json.dumps(self.read()) # # Creates Leaderboard database # def create(self): try: db.session.add(self) db.session.commit() return self except IntegrityError: db.session.remove() return None # # Returns Leaderboard name value pairs # def read(self): return { &quot;id&quot;: self.id, &quot;username&quot;: self.name, &quot;password&quot;: self.uid, &quot;pointsEasy&quot;: self.pointsEasy, &quot;pointsMedium&quot;: self.pointsMedium, &quot;pointsHard&quot;: self.pointsHard } # # Updates Leaderboard DB rows for points and user data # def update(self, username=&quot;&quot;, password=&quot;&quot;, pointsEasy=&quot;&quot;, pointsMedium=&quot;&quot;, pointsHard=&quot;&quot;): &quot;&quot;&quot;only updates values with length&quot;&quot;&quot; if len(username) &gt; 0: self.username = username if len(pointsEasy) &gt; 0: self.pointsEasy = pointsEasy if len(pointsMedium) &gt; 0: self.pointsMedium = pointsMedium if len(pointsHard) &gt; 0: self.pointsHard = pointsHard if len(password) &gt; 0: self.set_password(password) db.session.add(self) db.session.commit() return self # # Delets Leaderboard row from teh DB # def delete(self): db.session.delete(self) db.session.commit() return None . ModuleNotFoundError Traceback (most recent call last) /Users/linaalsheikh-eid/vscode/linas-fastpages/_notebooks/lesson student.ipynb Cell 6 in &lt;cell line: 1&gt;() -&gt; &lt;a href=&#39;vscode-notebook-cell:/Users/linaalsheikh-eid/vscode/linas-fastpages/_notebooks/lesson%20student.ipynb#W5sZmlsZQ%3D%3D?line=0&#39;&gt;1&lt;/a&gt; from sqlalchemy import Column, Integer, String, Text &lt;a href=&#39;vscode-notebook-cell:/Users/linaalsheikh-eid/vscode/linas-fastpages/_notebooks/lesson%20student.ipynb#W5sZmlsZQ%3D%3D?line=1&#39;&gt;2&lt;/a&gt; from sqlalchemy.exc import IntegrityError &lt;a href=&#39;vscode-notebook-cell:/Users/linaalsheikh-eid/vscode/linas-fastpages/_notebooks/lesson%20student.ipynb#W5sZmlsZQ%3D%3D?line=2&#39;&gt;3&lt;/a&gt; import json ModuleNotFoundError: No module named &#39;sqlalchemy&#39; . Initialization of Data . # Initializes Leaderboard DB with test data # def init_leaderboards(): with app.app_context(): &quot;&quot;&quot;Create database and tables&quot;&quot;&quot; db.create_all() &quot;&quot;&quot;Tester data for table&quot;&quot;&quot; l1 = Leaderboard(username=&quot;bob&quot;, password=&quot;apple&quot;, pointsEasy=2, pointsMedium=5, pointsHard=3) l2 = Leaderboard(username=&quot;bobby&quot;, password=&quot;appley&quot;, pointsEasy=20, pointsMedium=50, pointsHard=30) l3 = Leaderboard(username=&quot;bobbert&quot;, password=&quot;appled&quot;, pointsEasy=200, pointsMedium=500, pointsHard=300) l4 = Leaderboard(username=&quot;bobruth&quot;, password=&quot;appler&quot;, pointsEasy=100, pointsMedium=300, pointsHard=500) leaderboards = [l1, l2, l3, l4] &quot;&quot;&quot;Builds sample user/note(s) data&quot;&quot;&quot; for l in leaderboards: try: &#39;&#39;&#39;add user to table&#39;&#39;&#39; object = l.create() print(f&quot;Created new uid {object.username}&quot;) db.session.add(l) db.session.commit() except: &#39;&#39;&#39;fails with bad or duplicate data&#39;&#39;&#39; print(f&quot;Records exist uid {l.username}, or error.&quot;) init_leaderboards() . DO THESE FOR THIS SECTION . fill in the blanks | add a new leaderboard, and edit the bobbert leaderboard; add proof with a screenshot of the sqlite.db | add a new set of keys and values to the leaderboard; add proof with a screenshot of the sqlite.db | . Picture Database . | Used CRUD methods which have create, read, update, and delete rows in the table. There is a function called initEasyImages which populates the &#39;Images&#39; table with data. | The init method is used to create a new row in the table with a given imagePath, xCoord, yCoord, and difficulty. The repr method returns a string representation of the object when it is printed. | The table has five columns: id, _imagePath, _xCoord, _yCoord, and _difficulty. | | This part of the code defines getter and setter methods for the columns in the Images model. It sets and retrieves the metadata of the image. | | The initEasyImages function initializes the database with image metadata for easy difficulty images. | . from sqlalchemy import Column, Integer, String, Text, LargeBinary from sqlalchemy.exc import IntegrityError from pathlib import Path class Images(db.Model): __tablename__ = &#39;images&#39; id = Column(Integer, primary_key=True) _imagePath = Column(Text, unique=True, nullable=False) _xCoord = Column(Integer, nullable=False) _yCoord = Column(Integer, nullable=False) _difficulty = Column(Integer, nullable=False) def __init__(self, imagePath, xCoord, yCoord, difficulty): self._imagePath = imagePath self.xCoord = xCoord self.yCoord = yCoord self.difficulty = difficulty def __repr__(self): return &quot;&lt;image(id=&#39;%s&#39;, imagePath=&#39;%s&#39;, xCoord=&#39;%s&#39;, yCoord=&#39;%s&#39;, difficulty=&#39;%s&#39;)&gt;&quot; % ( self.id, self.imagePath, self.xCoord, self.yCoord, self.difficulty ) @property def imagePath(self): return self._imagePath @imagePath.setter def imagePath(self, value): self._imagePath = value @property def xCoord(self): return self._xCoord @xCoord.setter def xCoord(self, value): self._xCoord = value @property def yCoord(self): return self._yCoord @yCoord.setter def yCoord(self, value): self._yCoord = value @property def difficulty(self): return self._difficulty @difficulty.setter def difficulty(self, value): self._difficulty = value def to_dict(self): return {&quot;id&quot;: self.id, &quot;imagePath&quot;: self._imagePath, &quot;xCoord&quot;: self._xCoord, &quot;yCoord&quot;: self._yCoord, &quot;difficulty&quot;: self._difficulty} def create(self): try: # creates a person object from User(db.Model) class, passes initializers db.session.add(self) # add prepares to persist person object to Users table db.session.commit() # SqlAlchemy &quot;unit of work pattern&quot; requires a manual commit return self except IntegrityError: db.session.remove() return None # CRUD read converts self to dictionary # returns dictionary def read(self): return { &quot;path&quot;: self.imagePath, &quot;xCoord&quot;: self.xCoord, &quot;yCoord&quot;: self.yCoord, &quot;difficulty&quot;: self.difficulty } # CRUD update: updates user name, password, phone # returns self def update(self, path=&quot;&quot;, xCoord=&quot;&quot;, yCoord=&quot;&quot;, difficulty=&quot;&quot;): &quot;&quot;&quot;only updates values with length&quot;&quot;&quot; xCoord = int(xCoord) yCoord = int(yCoord) if path: self.imagePath = path if xCoord &gt;= 0: self.xCoord = xCoord if yCoord &gt;= 0: self.yCoord = yCoord if difficulty in range(3): self.difficulty = difficulty db.session.commit() return self def delete(self): db.session.delete(self) db.session.commit() return None . def initEasyImages(): with app.app_context(): db.create_all() image_dir = Path.cwd()/&quot;images/easy&quot; images_paths = [i.name for i in image_dir.iterdir()] images = [Images(&quot;images/easy/&quot; + image, 250, 250, 0) for image in images_paths] for image in images: try: image.create() print(&quot;Successfully added entry&quot;) except: db.session.remove() print(&quot;Error adding image: &quot;, image.imagePath) initEasyImages() . Popcorn Hacks . The init method initializes a new Images object with the following parameters: imagePath, xCoord, yCoord, and difficulty. | In the Images class, the tablename attribute specifies the name of the __. | The update method updates the values of the object&#39;s attributes imagePath, xCoord, yCoord, and difficulty based on the input parameters, and then uses the db.session.commit method to __ the changes to the database. | The db module used in this code is part of a larger library called __, which provides a set of tools for working with databases in Python. | . Picture Encoding . Essential Question: What are some methods that we could store and access images in the backend, and how can we send them to a frontend application? . The image encoding process for this project is done within the endpoints created on our backend application. The overarching process is split into three seperate sub-processes, each handling a different level of game-difficulty. For this lesson, we will look at the easy images sub-process as our example. . def get_random_easy_image(): images = Images.query.filter_by(_difficulty=0).all() image = random.choice(images) return image . This procedure is a void function that takes in no arguments directly, but does access the database via the Images object imported from the models that we created . The first line filters all database entries and searches for all image entries with the difficulty column set to 0, which we established as the identifying factor for easy images. The .all() method attached to the end of the query serves to return all matching image objects in a list called image. . The procedure finally returns a random image using the random.choice method. . class ImagesAPI: class _EasyImages(Resource): def get(self): image = get_random_easy_image() json_data = {} if image: image_path = project_path + &quot;/&quot; + image.imagePath with open(image_path, &quot;rb&quot;) as image_file: json_data[&quot;bytes&quot;] = str(base64.b64encode(image_file.read()))[2:][:-1] json_data[&quot;xCoord&quot;] = image.xCoord json_data[&quot;yCoord&quot;] = image.yCoord return jsonify(json_data) . If the first procedure locates and selects the image, the second procedure then encodes, formats, and returns the JSON data containing the image and its metadata. . The procedure first calls the get_random_easy_image() procedure created earlier to store our image object and also initializes an empty dictionary to store our json data. . If a valid image object is found, the procedure will attempt to create an absolute path to the image file on the computer running flask application. This is achieved by concatenating the absolute path of the working project directory to the relative image path stored in the database. The aboslute path of the directory is generated in our namespace package (__init__.py) in our _nighthawkguessr_api_ package. The line calculating the project path is shown below, and uses the Path object from the pathlib library. . project_path = Path.cwd().as_posix() . After creating the image path, the procedure attempts to open the image file, and procedes to use the base64.b64encode method to encode the image file bytes into base64 data. This is convinient for us as HTML on the frontend pages allows us to render images with base64 bytes (Not sure about normal image bytes). The base64 bytes are then encoded into a python literal string in order to be jsonified and displayed on the api endpoint. The [2:][:-1] appended to the end is a type of string slicing which removes the b&#39; generated at the start of the data and the &#39; generated at the end of the data. These extraneous characters are used to indicate a base64 string, and are not part of the original data. . The procedure finally appends the metadata (position of the right coordinates on the map) to the json_data dictionary, completing the process. . Finally, the procedure returns the JSONified data, which is accessible from our API. As you can see, the images we process are extremely large and possess high resolution (typically a few megabytes!) . Popcorn Hack: . Please write a few sentences answering the essential question, &quot;What are some methods that we could store and access images in the backend, and how can we send them to a frontend application?&quot; . The methods we can use to store and access images in the backend | . Endpoints . What are endpoints and how do we use them to transfer data from one part of the internet to another? . Backend: . The backend creates endpoints that are used to edit the properties of the database constructed by the model. | __GET__, _POST___, _PUT___, and __DELETE__ methods are used in order to define HTTP endpoints in the API. These endpoints are based on requests that can be made to manipulate__ the database. | Variables defined in the model file are used to call data from the database in order to be manipulated. | . | . Methods in Backend Example . Modules are being imported with specified classes which are used later in the program. Blueprint: used to organize routes and functions | request: used to access data sent to the Flask app. through the HTTP request | Api: creates a Flask instance that handles requests | Resource: this allows for the definition of custom HTTP requests | reqparse: used to parse (sort and search) and validate data that is requested | . | The blueprint and api are then defined as variables and are used to store any future data__ that is requested. | Some preliminary functions, such as find_by_username, are created to be used later in the API code, allowing for simpler__ code. In this case, these functions are used to search through the database to find specific usernames. | . | . from flask import Blueprint, request from flask_restful import Api, Resource, reqparse # setting variables used to store future data leaderboard_bp = Blueprint(&quot;leaderboards&quot;, __name__) leaderboard_api = Api(leaderboard_bp) # pre-made function created to search for usernames, allows for simplified program def find_by_username(username): users = Leaderboard.query.filter_by(_username=username).all() return users[0] . GET Method . This method is used to fetch specific data points from the database by searching through the usernames. | This will be different for each type of database being made, however the general format stays the same. Since this is a text database, to pull specific information from the database, the API will query__ through the data using the username, which is unique. | The function defined previously, find_by_username(), is used to search through the database and pull the specific data point that is being searched. | If the user exists, the data of that user will be returned, being sent to the frontend of the program. | If a user isn&#39;t found, an error will be returned that the user does not exist. | . | In general, the program will always be searching for a piece of information that is unique and that will be used to pull data to wherever it is being requested. | . def get(self): # requested username turned into variable for later use username = request.get_json().get(&quot;username&quot;) print(username, &quot;uid&quot;) # username used to search for data and the found data is made into a variable user = find_by_username(username) if user: # data is sent to the frontend return user.to_dict() # error checking return {&quot;message&quot;: user}, 404 . POST Method . This method is used to add a specific piece of information in the database based on searching by usernames. | This is again different for each database that is made, however the general structure stays the same. In this example, a parser is being used to extract data from an incoming request. In this case, the RequestParser class is used from the Flask module. All required arguments are added to the parser, specifying what type of data it is. | The __args__ variable is added in order to parse and store all incoming data. | . | The variable leaderboard is created to make a new object that will contain the values from the incoming data. | The function will attempt to add a new entry in the leaderboard database and return a status of a successful addition of the data. | If there is an error in the data being inputted, a status code of 500__ will be returned. | . | . def post(self): # using parsers to gather and data that is to be posted and validate it&#39;s true parser = reqparse.RequestParser() parser.add_argument(&quot;username&quot;, required=True, type=str) parser.add_argument(&quot;password&quot;, required=True, type=str) parser.add_argument(&quot;pointsEasy&quot;, required=True, type=int) parser.add_argument(&quot;pointsMedium&quot;, required=True, type=int) parser.add_argument(&quot;pointsHard&quot;, required=True, type=int) # variable made to store data args = parser.parse_args() # variable created to format all data into one place and send to database for logging leaderboard = Leaderboard(args[&quot;username&quot;], args[&quot;password&quot;], args[&quot;pointsEasy&quot;], args[&quot;pointsMedium&quot;], args[&quot;pointsHard&quot;]) try: # data is sent to the database for storage db.session.add(leaderboard) db.session.commit() return leaderboard.to_dict(), 201 except Exception as e: # error checking db.session.rollback() return {&quot;message&quot;: f&quot;server error: {e}&quot;}, 500 . PUT Method . This method is used to update a specific piece of information in the database based on searching by usernames. | For each data base that is made, there will be different specific but the overall structure stays the same. First, the username variable is defined, which __ the requested username and sets it as a variable that will be used later to edit a specific dataset. | The function find_by_username() is again used to search through the data to look for the username requested. This is set to a variable to be used later. | If the username is found in the database, the rest of the dataset is updated with the new __ requested. This is updated into the database. | If there is an error found with the data requested of it the user isn&#39;t found, an error is returned. | . | . def put(self): # variable created to make requested username into something that can be used to search for data in future username = request.get_json().get(&quot;username&quot;) print(username, &quot;uid&quot;) try: # attempts to find the data in the database user = find_by_username(username) if user: # if the data is found, the data points are updates user.pointsEasy = int(request.get_json().get(&quot;pointsEasy&quot;)) user.pointsMedium = int(request.get_json().get(&quot;pointsMedium&quot;)) user.pointsHard = int(request.get_json().get(&quot;pointsHard&quot;)) db.session.commit() return user.to_dict(), 201 else: # if user not found, error is returned return {&quot;message&quot;: &quot;leaderboard not found&quot;}, 404 except Exception as e: # checks for errors in request db.session.rollback() return {&quot;message&quot;: f&quot;server error: {e}&quot;}, 500 . DELETE Method . This method is used to __ a specific information from the database, again searching by username. | The overall structure stays the same between different databases, but the specific __ will need to be changed to personalize the database. A variable for the username is created in order to search for for the user name requested later in the code with the function find_by_username(). | If the user is found, the user is deleted, along with that user&#39;s data and the change is saved to the database. | If the user isn&#39;t found or if an error is found with the data requested, an __ is returned. | . | . def delete(self): # username variable defined to store requested value username = request.get_json().get(&quot;username&quot;) print(username, &quot;uid&quot;) try: # finds the username and stores data in variable user = find_by_username(username) if user: # if the user is found, the user and their data is deleted db.session.delete(user) db.session.commit() return user.to_dict() else: # if user not found, error is returned return {&quot;message&quot;: &quot;leaderboard not found&quot;}, 404 except Exception as e: # error checking for request error db.session.rollback() return {&quot;message&quot;: f&quot;server error: {e}&quot;}, 500 . Displaying the Full Database . Another class is created in order to __ the entire database at once and also to delete the entire database if necessary. | This uses the same functions as before to GET and DELETE the data, however it is modified slightly to look through the entire database abd display or delete all data points. | An example of where this would be useful is to create a table of data in the frontend__. | . class LeaderboardListAPI(Resource): # GET method def get(self): try: # attempts to find the entire database requested and is stored in variable leaderboards = db.session.query(Leaderboard).all() # sends back the entire database return [leaderboard.to_dict() for leaderboard in leaderboards] except Exception as e: # error checking for request errors db.session.rollback() return {&quot;message&quot;: f&quot;server error: {e}&quot;}, 500 # DELETE method def delete(self): try: # deletes entire database db.session.query(Leaderboard).delete() db.session.commit() return [] except Exception as e: # checks for errors in request db.session.rollback() return {&quot;message&quot;: f&quot;server error: {e}&quot;}, 500 . Popcorn Hacks . Please answer these questions to earn points for the popcorn hacks. . What are the four HTTP request methods that are used with Flask? There is GET, POST, PUT, and DELETE | . | What is a parser and how would it be aid with data validation? it would search and sort through the data, aiding with data validation | . | What is the role endpoints in Flask? End points send data from one place to another | . | Frontend and How it Communicates to Backend . This first part of the frontend logic simply finds out of the site is running locally or not, off of which is figures out whether or not to pull data from the local backend link or the global backend link. In this example, a global backend link hasn&#39;t been sent, however it would go in the second set of quotations after the local address. This isn&#39;t something you need to know, but it is nice to use when developing full stack applications. . // checks if site is run locally const isLocalhost = Boolean( window.location.hostname === &quot;localhost&quot; || window.location.hostname === &quot;[::1]&quot; || window.location.hostname.match(/^127(?: .(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/) ) // defines database url const api = isLocalhost ? &quot;http://localhost:8200&quot; : &quot;&quot;; . GET Method . This method is more complicated in terms of requesting, simply because in order to, for example, print all data points into a tab;e, the function needs to iterate through the entire database. | In this example, the function getList() is used to asynchronously fetch the entire database and set it to a variable called list. The list is returned for later use outside of this function in order to print the data. | . | . Printing the Data . In order to print the data, the function getList() is run and once it is run, it iterates__ through the data to pull out each individual data point and enter it into the function used to make the table. For each class in the database, which is each row in the database, the variables corresponding to that specific class are pulled and inserted into the addTask() function as __ to create the table of users. | . | The function addTask() is used to create the visual table that the user sees. A row is created and for each table cell in that row, the data is added by iterating through the array of variables that are parameters pulled directly from the database. | A new row is added into table for each new class of information pulled from the database. | . | . // fetches entire database const getList = async () =&gt; { // stores it in variable list const list = await fetch(api + &quot;/leaderboardList&quot;).then((r) =&gt; r.json()); return list }; // goes through entire database and pulls each individual class getList().then(list =&gt; { // for each class (row), data is pulled and added into addTask() function to be put in visual table list.forEach(cls =&gt; { addTask(cls.username, cls.pointsEasy, cls.pointsMedium, cls.pointsHard) }) }) // adds visual representation of data in table function addTask(username, pointsEasy, pointsMedium, pointsHard) { // array of variables defining data points var tableCells = [username, pointsEasy, pointsMedium, pointsHard] // creates new row in variable var row = document.createElement(&#39;tr&#39;) // goes through entire data set and places data into cells for (var i = 0; i &lt; tableCells.length; i++) { var tableCell = document.createElement(&#39;th&#39;) tableCell.textContent = tableCells[i] tableCell.className = &#39;cell&#39; row.appendChild(tableCell) } // creates new row as child of schedule element schedule.appendChild(row) } . POST Method . This method is used to push data to the backend using the HTTP__ POST method. The function addData is defined with the parameters that are going to be pushed into the backend. | An object is created to define the variables that are going to be pushed into the backend. This is basically the JSON string that will be sent to the backend to get decoded and inserted into the database. | The fetch() function is called with the api variable, which is a variable representing the url for the backend API, and the extension specific to where the data will be posted, in this case being /leaderboard. The method, headers, and body of the data are defined in order to complete a successful HTTP request to the backend. The object data which was created earlier, is converted to a JSON string here and sent to the backend. | . | If an error is detected, it is returned and the request will fail. | . | . // calls addData function function addData(username, password, pointsEasy, pointsMedium, pointsHard){ // creates object defining the variables that will be added to the backend, corresponding with the backend variables let data = { &quot;username&quot;: username, &quot;password&quot;: password, &quot;pointsEasy&quot;: pointsEasy, &quot;pointsMedium&quot;: pointsMedium, &quot;pointsHard&quot;: pointsHard } // POST method called fetch(api + &#39;/leaderboard&#39;, { method: &#39;POST&#39;, headers: { &#39;Content-Type&#39;: &#39;application/json&#39;, }, body: JSON.stringify(data), }) // error checking .then((response) =&gt; response.json()) .catch((error) =&gt; { console.error(&#39;Error:&#39;, error); }); } . PUT and DELETE Methods . These two methods are almost identical to the POST method above in the way they work, the only difference being that the method__ requested is different. The name of the function defined is also changes, in this case being editData() and deleteData(). | . // editing function defined function editData(username, password, pointsEasy, pointsMedium, pointsHard){ // has object with variables that are required in backend let data = { &quot;username&quot;: username, &quot;password&quot;: password, &quot;pointsEasy&quot;: pointsEasy, &quot;pointsMedium&quot;: pointsMedium, &quot;pointsHard&quot;: pointsHard } // PUT method called fetch(api + &#39;/leaderboard&#39;, { method: &#39;PUT&#39;, headers: { &#39;Content-Type&#39;: &#39;application/json&#39;, }, body: JSON.stringify(data), }) // error checking .then((response) =&gt; response.json()) .catch((error) =&gt; { console.error(&#39;Error:&#39;, error); }); } . // deleting function defined function deleteData(username, password, pointsEasy, pointsMedium, pointsHard){ // object defined with variables that are same as backend let data = { &quot;username&quot;: username, &quot;password&quot;: password, &quot;pointsEasy&quot;: pointsEasy, &quot;pointsMedium&quot;: pointsMedium, &quot;pointsHard&quot;: pointsHard } // DELETE method called fetch(api + &#39;/leaderboard&#39;, { method: &#39;DELETE&#39;, headers: { &#39;Content-Type&#39;: &#39;application/json&#39;, }, body: JSON.stringify(data), }) // error checking .then((response) =&gt; response.json()) .catch((error) =&gt; { console.error(&#39;Error:&#39;, error); }); } . Calling Images (GET Method) . The process for calling images is basically the same as anything else, except you need to be able to reconstruct the images based on the base64 that is requested from the backend. | In this case, the image in the api is being called to the frontend and is returned as the variable list. This is then inserted directly into the html by getting the element that needs to be edited and styling with css__ by using the built-in function data:image/png;base64, which translated from bytes to pixel. | . | . // GET method calling info from backend url const getList = async () =&gt; { const list = await fetch(api + &quot;/api/images/GetEasyImage&quot;).then((r) =&gt; r.json()); return list }; // inserting image into frontend getList().then(list =&gt; { document.getElementsByTagName(&quot;body&quot;)[0].style = &quot;background-image: url(&#39;data:image/png;base64, &quot; + list.bytes +&quot;&#39;);&quot; }) . Popcorn Hacks . Please answer these questions to earn points for the popcorn hacks. . How is data for images stored in a Flask API and how is it displayed on the frontend when requested? The data for images is stored in a Flask API using the GET method that will call the images and reconstruct them into base64. | . | What is the fetch() function and how is it used in frontend logic? . | How is data formatted and sent to the backend? (mention JSON in your answer) | Time and Space Complexity of Algorithms . The lesson for time and space complexity of algorithms will consist of demonstrations of sorting algorithms and the different time complexities that they come with on a small scale. This can be acomplished using things such as a deck of cards or even with actual people. An example of how this will work is laying out the cards in a random order on the table, and demonstrating different ways of sorting it. From methods such as bubble sort to methods such as bogo sort, it will be really easy to see exactly how much time it would take for these different sorting algoritms to complete. Then after that, it is easy to understand the concept of time complexity when given a real world example. . Space complexity can be demonstrated by using the same method, however, adding in the extra step of having the cards in a pile. This will show how much space is needed to complete the sorting algorithm. This will easily reveal the concept of space complexity because it allows people to witness a real world, physical example of the concept, turning a really hard to grasp concept into something that is easy to understand. . Additionally, we are also going to analyze certain algorithms within our project to show how such analysis is applicable to real world projects. . Essential Question: What is the quicksort algorithm, and how does it work? How does it&#39;s time and space complexities scale with input sizes? . QuickSort Algorithm . The main algorithm we&#39;ve employed is an recursive implementation of quickSort in the backend to sort the database entries to obtain the user with the highest overall score. Typically this algorithm is implemented to sort in ascending order, but to make it easier to extract the top 10 users, we sill be modifying the algorithm to sort in descending order (so the top players show up first in the list). . class LeaderboardTop10(Resource): def partition(self, arr, lo, hi): pivot = arr[hi][1] # Pivot value set to the 2nd index of the last element pivot_pos = lo - 1 # Set our base pivot position, ensure that lower picoit index == lo for idx in range(lo, hi): # Iterate over all elements in the partition array if arr[idx][1] &gt;= pivot: # Found an element creater than pivot pivot_pos+=1 # Increment correct position for pivot arr[pivot_pos], arr[idx] = arr[idx], arr[pivot_pos] # Swap the larger element with the element at the current pivot position arr[pivot_pos + 1], arr[hi] = arr[hi], arr[pivot_pos + 1] # Swap element at pivot position with the pivot element return pivot_pos+1 # Return index of pivot element def qSortUserList(self, arr, lo, hi): if lo &lt; hi: last_pivot = self.partition(arr, lo, hi) self.qSortUserList(arr, lo, last_pivot-1) self.qSortUserList(arr, last_pivot+1, hi) def get(self): users_list = get_user_list() top10 = {} self.qSortUserList(users_list, 0, len(users_list)-1) for user in users_list: top10[user[0]] = user[1] print(top10) if len(top10) &lt;= 10: return top10 return top10[:10] . To understand how the algorithm first, we must first familiarize ourselves with the process. . Our backend grabs all users from our leaderboard | Returns all users and their scores in a 2-D array, each element is a list of length two that contains the username and cumulative score of the player | The sorting algorithm will use the second element representing the user score to sort the array of users. ┌─────────────────────┐ ┌──────────────────┐ ┌─────────────────┐ │ │ │ │ │ │ │ │ │ Split │ │ display │ │ Database │ │ the ├──────────────► sorted list │ │ │ │ List into │ │ on endpoint │ │ │ │ top 10 users │ │ │ └──────────┬──────────┘ └─────────▲────────┘ └─────────────────┘ │ │ │ │ │ │ │ │ ┌──────────▼──────────┐ ┌─────────┴────────┐ │ │ │ │ │ 2-D User Array │ │ QuickSort │ │ ├───────────────► │ │ [(username, score)] │ │ Algorithm │ │ │ │ │ └─────────────────────┘ └──────────────────┘ . Our quickSort algorithm consists of 2 procedures, a partition() procedure that pivots and sorts individual elements, and a qSortUserList() that performs recursion which finishes the sorting. | The Logic . The partition procedure will serve to &quot;partition&quot; our list into 2 parts, a smaller portion and a larger portion around a certain pivot value (Note: These portions don&#39;t have to sorted yet!). . Partition procedure . First, partition selects a certain element in a list to be a _pivot__. This pivot value will be used to make comparisons to every other value in the array. For simplicity, we have selected our pivot element as the last element in the unsorted list. The procedure defines a pivot_pos variable to denote the correct position of the pivot index after each iteration. Although it may seem weird that the variable intially starts with a value of 0-1 = -1, this negative index is resolved by the return statement, which always returns an index that&#39;s one higher than pivot_pos. This serves to ensure that the lowest pivot index would be 0, which is the smallest element in any given partition. . pivot = arr[hi][1] pivot_pos = lo - 1 . The partition will then iterate over each element in the list from the starting and ending indexes indicated by the parameters. if a particular value is found to be larger than the pivot, the algorithm well then increment the recorded pivot position and swap the pivot with the found element. . for idx in range(lo, hi): if arr[idx][1] &gt;= pivot: pivot_pos+=1 arr[pivot_pos], arr[idx] = arr[idx], arr[pivot_pos] . Finally, the partition procedure swaps the element at the pivot_pos+1 index with our pivot element at the hi index to place the pivot at it&#39;s rightful place. We know that pivot_pos+1 must be smaller than hi because it did not trigger the conditional to increment the `pivot_pos+1`` index. At last, the pivot_pos is incremented and returned to serve as an indicator of where our two partitions split. . arr[pivot_pos + 1], arr[hi] = arr[hi], arr[pivot_pos + 1] return pivot_pos+1 . qSort procedure . If the parition procedure splits our list into smaller and larger regions, then our qSort procedure ensures that these regions are in order. It&#39;s hard to explain, but the procedure iterates over each paritition, repeating the paritition process, setting new pivot values, and correctly places the pivot values at their correct sorted order. . The procedure first checks if the lower index is smaller than the higher index, to ensure that our parition has a length greater than 1. If this check passes, the procedure then calls the partition procedure to both split our list into the two distinct regions and also the index of our correctly placed pivot value. The procedure then invokes itself again on the larger interval (replacing hi to be the partition index-1 since the previous pivot is already sorted), and also on the smaller interval (replacing lo to be partition index+1). . Eventually, the qSort procedure will iterate through all elements in the list while parition places each element at the correct position, giving us the final sorted list. . Complexity analysis . To analyze time complexity, we must analyze the partition and qSort procedures. . For the qSort procedure, because we divide the array into 2 halves during each function call, our number of function calls scales proportionally to _long(n)__, where n__ is the length of the input array. However, within each function call, we also call the partition procedure, which contains an for-loop that iterates over each element in the partioned array, comparing it to a pivot value. We are well familiar with since loops, and can safely say that runtime scales proportionally to the length of the partition array. Due to this, we can conclude that our iteration time complexity scales linearly. Thus for each iterative process, our timerun scales proportionally to __n__. . Finally, we could multiply our two complexities together to get a representation of our overall complexity. Thus, the asymptotic notation for a time complexity could be represented as _O(log(n))__, where n is the length of the input array. Keep in mind, Big-Oh notation is not a function that returns the accurate runtime for any given input, but rather only gives us a model to see how runtime scales with increasing input sizes. . Space complexity for this program is much easier to analyze. Because the array is sorted in-place (meaning we don&#39;t create other placeholders or copies), we require no additional space to sort this array. However, recursive function calls may require extra storage on the call stack. Since we found the number of recursive calls to be asymptotic to O(log(n))_, we can conclude that quickSort has an O(1) space complexity for an iterative method, and an O(logn) space complexity for a recursive method. . Popcorn Hack . Please answer our EQ for this section: What is the quicksort algorithm, and how does it work? How does it&#39;s time and space complexities scale with input sizes? . The quicksort algorithm depends on the pivot point. In a set of numbers, a pivot number is chosen and each other value is determined if its smaller than or larger than the pivot value and places it to the left or right respectively. You repeat the process until all the values are sorted. Time and space complexities... | . Hacks - Frontend and Backend . Please clone these two repositories: . Frontend | Backend | . Directions: . You will be creating a full stack of a text and image database which you will code in the Flask Backend and pull information to sort in the Frontend. . You need to have coded a fully working CRUD in the Flask, which you can show working with Postman, however you only need to show the Frontend reading and displaying data from the backend. . You may use the code we showed to you today in class in order to code the both the Frontend and Backend. . Follow the directions in the comments in the Flask Backend and the ReadMe in the frontend before starting. . Hacks - QuickSort . On this notebook, try recreating the original quicksort algorithm from our modified version. For an additional challenge, try abstracting the partitioning process through list comprehension! . After creating a successful algorithm, either create a diagram showing how the algorithm works, or a diagram that illustrates the time and/or space complexity of a recursive approach. . Hacks Helpers . If you need help with your hacks, you can check out our project repos to see how we did it. . Frontend Table | Frontend Image | Backend | . You can also message us on the coding Slack channel for additional help. . Points . Popcorn Hacks - 0.1 pts | Full Stack - 0.4+ 0.5 extra for styling html page | . | QuickSort Hacks - 0.3+ 0.5 extra for implementing quicksort | . | . HACKS ARE DUE SATURDAY (4/29) 11:59 PM .",
            "url": "https://linaawad1.github.io/linas-fastpages/student/2023/04/30/lesson-student.html",
            "relUrl": "/student/2023/04/30/lesson-student.html",
            "date": " • Apr 30, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "P3-M 4/28 Introduction to SASS",
            "content": "What is SASS? . Sass is a preprocessor language that&#39;s interpreted into CSS. A preprocessor language takes input data and converts it to an output that&#39;s used as input by another program. This means when you run Sass code, you&#39;re actually converting your code to CSS. That CSS code output is then used directly by a browser. Fun fact CSS stands for Cascading Style Sheets and SASS stands for Syntactically Awesome Style Sheets. . SCSS vs. CSS . Understanding the differences between SCSS and CSS . What is CSS . CSS is the default technology that most programmers use when styling webpage. It is one of the 3 fundamental web technologies along with HTML and JavaScript. HTML manages the structure, JavaScript makes pages interactive, and CSS changes the style by taking a markup language like HTML and describes how it should be presented to the user. . | However, CSS is not very easy to work with lacking a lot features often making using CSS very confusing and difficult or hard to work with on lengthy projects. This is why there are tools like Bootstrap, Sass, and Tailwind that make styling a lot easier and more efficient. We will be using Sass in this course. . | . CSS Example . This is an example of CSS that can be used to change body text of an HTML document | Hack Question:Can you guess what its changing style of the text to? I would guess that this changes the style of the text to a royal blue color. | . body{ color: #0000FF; font-family: Ariel, sans-serif; font-size: 16px; } . What is SCSS . SCSS is short for Sassy Cascading Style Sheets. | SCSS very similar to CSS but the difference comes with the fact that SCSS extends the functionality of CSS while also making it simpler. What this allows us to do is it enables us to things like nested styling, functions, mixins, variables, inheritance (more on these later) and so on. | Larger Program, don&#39;t want clutter ### Sass Code Example | . $blue: #0000FF; body{ color: $blue; font-family: Ariel, sans-serif; font-size: 16px; } . This example is doing the same thing as the other code segment above but the difference being that here we defined the color as $blue which makes it much easier for us to recall later on. In fact, we have done this before, if you have been using the dark mode/midnight theme then go ahead and navigate your your _sass folder and check out the dark-mode.scss and you&#39;ll see something similar to the example above | . So which one is better to use? . CSS tends to be better for really simple styling where not many complex or nested styles are required and small projects that doesn&#39;t require a lot of customization. | SCSS on the other hand is very good for more complex styling and working with a project with more than one page where maybe lots of customization is needed. Such as the projects we made last and first trimester. | . Modular SCSS . Understanding how to use modular SCSS . Modular SCSS allows you to break multiple different files and then be able to compile them into a single CSS file | How do you do this? Well all you need to do is have _filenames.scss so that is compiled into its own file | Now after adding the to the file name you can import it into you file without the and all the styles will be carried over. | The benefits of a partial is that it allows you to big websites and allows you to break up the code in multiple components and easily make changes instead of having to go through a huge file. | All styles in the partial will be added and can be used into the main file as if they were defined in the main file. | . File 1 _variable.scss . $primary-button-color: #009494; $hover-color: black; $menu-color: #f2f2f2; . File 2 style.scss . We can see the importing of the .scss file&#39;s content into the other main .scss file style.scss | . {@import &#39;variables&#39;; @import &quot;{{ site.theme }}&quot;;} /* &quot;row style&quot; is flexible size and aligns pictures in center */ .row { align-items: center; display: flex; } /* &quot;column style&quot; is one-third of the width with padding */ .column { flex: 33.33%; padding: 5px; } .menu a { // float: left; display: block; color: $menu-color; text-align: center; // padding: 14px 16px; text-decoration: none; } .menu a:hover { background: $primary-button-color; color: $hover-color; } . Nesting . What is nesting? Where did the birds come from? . Nesting is a way to organize your code and make it easier to read. It also helps keep your code DRY (Don&#39;t Repeat Yourself). | Nesting is when you put one selector inside another selector. This is a great way to keep your code organized and make it easier to read. | When we make HTML we often nest different elements within each other and have a clear structure when we look at it. | The problem is that in regular CSS we don&#39;t have that so we need to use SASS to help us organize our code. | . Warning:Don&#39;t nest too much as when the CSS is processed it can make overqualified selectors which can be hard to read and maintain. Which means that it would only target that specific element type and not any other elements that have the same class name. ## Sass Nesting | Through nesting the ul, li, and a selectors within the nav selector makes your CSS better and increases its readability overall. | . nav { ul { margin: 0; padding: 0; list-style: none; } li { display: inline-block; } a { display: block; padding: 6px 12px; text-decoration: none; } } . CSS - Lack of Nesting . We can see that through the lack of nesting the CSS is not as organized and needs extra information to be able to make it more clear exactly what is being targeted. | . nav ul { margin: 0; padding: 0; list-style: none; } nav li { display: inline-block; } nav a { display: block; padding: 6px 12px; text-decoration: none; } . Variables . What is a variable? . A variable is a container that stores information so for instance when you multiple places that refer to one value you can just use the variable name instead of the value. | This is valuable in SASS because it allows you to reuse that value in multiple places throughout you stylesheet. | Variables in CSS preprocessors such as Sass allow you to store information that you can reuse in your stylesheet, such as font stacks, colors, or any other CSS value you anticipate needing. The $ symbol is used in Sass to designate a variable. | . Pro Tip:The reason SASS variables are better than variables in regular CSS is that they are more consider and easier to read with a much simpler syntax. Fun Fact: Variables in SASS came before CSS and often SASS has features long before they are actually added to CSS as a whole. . Variable Example Syntax . $variable-name: value; | Once the sass is processed the variable name is replaced with the value throughout the program. | . $main-font: Calibri, sans-serif; $main-color: #000; $main-color-hover: #000; . Operators . Operators are used to perform operations on variables and other aspects of the language like in python we can use operators to see if values are equal, add, divide, subtract, multiply, etc. | SASS has a lot of operators that can be used to perform operations on variables and other aspects of the language as well. They can include == to check if two values are equal and != to check if two values are not equal | + to add two values together | - to subtract two values | * to multiply two values | / to divide two values | % to find the remainder of two values | &lt; to check if one value is less than another | &gt; to check if one value is greater than another | &lt;= to check if one value is less than or equal to another | &gt;= to check if one value is greater than or equal to another | Also there is and, or, &amp; not to be able to use boolean operations | . | . Operator Example Syntax . Operators are used in this example to perform string concatenation | . // Html &lt;p id=&quot;testing&quot;&gt;original text and&lt;/p&gt; // SASS #testing:after{ content: &quot; some&quot; + &quot; more&quot; + &quot; text&quot;; } // Output original text and some more text . Conditional Statements . There are conditional statements in SASS just like in Python and JavaScript they work the same way as well. | Conditional statements are used to perform different actions based on different conditions. Such as if a certain condition is true then do this, if it is false then do that and so on. | SASS has @if which allows for different styles based on if a boolean expression was true or false. | SASS has @else which allows for different set of styles if the if condition was not met or false. | SASS has @else if which allows for an alternative conditions to be run if the first is not met. | . $color: red; button { @if $color == red { background-color: $color; } } // @else: allows you to provide an alternative set of styles to apply if the condition in the @if statement isn&#39;t met $color: blue; button { @if $color == red { background-color: red; } @else { background-color: $color; } } // @else if: allows you to provide multiple alternative conditions to test $color: green; button { @if $color == red { background-color: red; } @else if $color == blue { background-color: blue; } @else { background-color: $color; } } . Loops In Sass . Loops are present in SASS through the @for and @while decorators, along with @each. | Loops are used to repeat a block of code a certain number of times or until a certain condition is met just like in any other programming language. . For Loops: Are used to iterate through a value like a list or a range of numbers | While Loops: Are used to iterate through a block of code until a certain condition is met such as a value is being equal to a certain value through an incrementing or decrementing a variable or any other condition that is met. | . | When using while loops they can be necessary but it is better to use @each and @for as it will make it clear and be able to compile faster. . | Side Note: In SASS lists care a any group of values that are separated by a comma or a space there is no special brackets used like in python or javascript. Lists can be searched for values however they are immutable meaning that they cannot be changed once they are created. . | . Some Code Examples of Loops and Lists . // A for each loop is used to interact with a group of sizes changing // the size of the element for each item in the list $sizes: 40px, 50px, 80px; @each $size in $sizes { .icon-#{$size} { font-size: $size; height: $size; width: $size; } } // @each: allows you to loop over a list of values and generate styles $colors: red, green, blue; @each $color in $colors { .color-#{$color} { background-color: $color; } } . @debug list.index(1px solid red, 1px); // 1 @debug list.index(1px solid red, solid); // 2 @debug list.index(1px solid red, dashed); // null . @use &quot;sass:math&quot;; /// Divides `$value` by `$ratio` until it&#39;s below `$base`. @function scale-below($value, $base, $ratio: 1.618) { @while $value &gt; $base { $value: math.div($value, $ratio); } @return $value; } $normal-font-size: 16px; sup { font-size: scale-below(20px, 16px); } . $base-color: #036; @for $i from 1 through 3 { ul:nth-child(3n + #{$i}) { background-color: lighten($base-color, $i * 5%); } } // @for: allows you to loop over a range of values and generate styles @for $i from 1 through 3 { .item-#{$i} { width: 100px * $i; } } . Functions in SASS . What is a function? . A function is a block of code that performs a specific task. This is a great method to be able to reuse code and processes in a manner that is more efficient and allows for the reuse of code. We do this all the time in programming languages such as JavaScript and Python. | . SASS functions . Sass Functions allow you to define complex calculations and transformations that can be used throughout your stylesheet and allow you to perform complex operations on values, manipulate data, plus you can generate content dynamically. . | There a are built in functions and ones you can make on your own like languages such as JavaScript and Python. . | SASS functions can be used to perform arithmetic operations, manipulate colors, work with strings, and more. . | Functions in SASS are similar to functions in programming languages, but they can be used within SASS stylesheets to generate CSS code dynamically. . | . Using Built-in Functions . Like Python and Javascript SASS provides a variety of built-in functions for math, color manipulation, string manipulation, and more. | . Math Functions . SASS has many functions that allow you to be able to perform wide range of math operations similar to the ones present in python including more complex operations. | . .round(1.2); // returns 1 .ceil(1.2); // returns 2 .floor(1.2); // returns 1 .abs(-1.2); // returns 1.2 .min(1, 2, 3); // returns 1 .max(1, 2, 3); // returns 3 .random(1, 100); // returns a random number between 1 and 100 . Color Functions . Color is an important component of any website and SASS provides a wide range of functions that allow you to manipulate colors in a variety of ways. | . .lighten(#007fff, 20%); // returns a lighter shade of blue .darken(#007fff, 20%); // returns a darker shade of blue .opacify(#007fff, 0.2); // makes the color more opaque .transparentize(#007fff, 0.2); // makes the color more transparent .mix(#007fff, #ff0000, 50%); // returns a mix of two colors . String Functions . SASS provides a variety of string functions that allow you to manipulate strings. Here are some examples: | . .to-upper-case(&quot;hello world&quot;); // returns &quot;HELLO WORLD&quot; .to-lower-case(&quot;HELLO WORLD&quot;); // returns &quot;hello world&quot; .str-index(&quot;hello world&quot;, &quot;world&quot;); // returns the index of the first occurrence of &quot;world&quot; .str-insert(&quot;hello&quot;, &quot; world&quot;, 5); // inserts &quot; world&quot; into &quot;hello&quot; at position 5 . Creating Custom Functions . In addition to using built-in functions, you can also create your own functions in SASS using the @function name(arguments){} | @return is similar to the return statement in JavaScript and Python. It returns a value from a function. | Functions take input values, perform calculations, and return a result. Here&#39;s an example of a simple function that calculates the area of a rectangle: | . @function rectangle-area($width, $height) { @return $width * $height; } // Usage: $area: rectangle-area(10px, 20px); // Returns 200px . Or you can also make a different kind of function that increases the font size to the factorial of a inputted number. | . @function factorial($number){ $calculated: 1; @for $_ from 1 through $number { $calculated: $calculated*$number; } @return $calculated; } #testing { font-size: factorial(3); } . //Combining functions and loops to achieve different sass effects @function sum($numList){ $sum: 0; @each $num in $numList { $sum: $sum+$num; } @return $num; } @function tri($num){ $sum: 0; @for $i from 1 through $num { $sum: $sum+$num; } @return $sum; } @function max($nums){ $i:0; $value:0px; @while $i&lt;length($nums){ @if $value&lt;list.nth($nums,$i){ $value:list.nth($nums,$i); } } } . Custom functions are very powerful, and can be used to create reusable pieces of code that can be used throughout your stylesheets. . | SASS functions are a powerful feature that allow you to perform complex operations on values, manipulate data, and generate content dynamically. By using built-in functions and creating your own custom functions, you can greatly extend the capabilities of your SASS stylesheets. . | . Mixins . Mixin what is a mix in what are we mixing in? . Mixins are a way to make groups of CSS that you want to reuse throughout your site anywhere you please. | Mixins are a form of template and that you can use to build on top of to make different features later on this prevents you from having to write the same code over and over again. | This is a form of encapsulation in your CSS and is a great way to make your code more organized and easier to read. | Mixins can also take in arguments and be able to be used to apply effects on certain elements if that is a feature you want to add to your site. However unlike functions which also take arguments mixins cannot return values. | To use a mixin declare it with @mixin and then incorporate with @include. | . Inheritance . What is inheritance? . In general programming concept where the child class can inherit properties from the parent class. These properties can be changed and modified in the child class. This prevents code from being repeated and makes the code more usable and flexible. | In SASS we have a similar concept that can be used as well we can create base styles and then have other styles inherit from them and then we can change them as we please. | We can do that by through using @extend .name-of-class and then we can add more styles to it as we please. Simple as that | . Mixin &amp; Inheritance Code Example . // example of @mixin @mixin button { width: auto; height: auto; border-radius: 10px; background-color: #21807c; border: 3px solid black; font-size: 1.5em; display: flex; justify-content: center; align-items: center; grid-column: span 1; grid-row: span 1; // creates smooth animation effect transition: all 0.5s; } // default button theme for calculator and stopwatch buttons. Both will follow the same button format .button { // uses the scss from the @mixin @include button; } /* styling for the calculator clear button */ .calculator-button-clear { // @extend inherits .button and then changes the background color from .button @extend .button; background-color: #e68b1c; } /* styling for the calculator equals button */ .calculator-button-equals { // another @extend inherits .button and then changes the background color from .button @extend .button; background-color: #e70f0f; } . Hacks &amp; Hack Helper - Calculator &amp; Hack Helper - Stopwatch . All hacks are pair/trio hacks, individual hacks are not recommended and will not be accepted unless a valid reason is given. We will respond in the appropriate slack channel if we have any questions. Hacks are due by 11:59pm on Wednesday 4/26/2023 at 11:59 p.m. PST. Any late submission will have a deduction of 0.1 points from their total grade. | . Part 1: Reflections 0.4 Points . Write a short description of each key feature of Sass and compare it to how it to CSS and how using Sass makes your life easier when using all the features. Include examples of how it would have made prior features from past projects simpler to implement. Also answer the questions indicated as hack questions. | . Part 2: Sass Demo 0.5+ Points . Using at least 3 or more sass features create a UI demo that may be used for future or current projects and reflect on how this was more effective than doing the same task using only regular features of CSS. Extra points will be awarded based on creativity and extra addition of features from SASS. | . Credits: Team Mortalicously Sassy 💖 .",
            "url": "https://linaawad1.github.io/linas-fastpages/student/2023/04/28/P3M-SASSFundamentals.html",
            "relUrl": "/student/2023/04/28/P3M-SASSFundamentals.html",
            "date": " • Apr 28, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "Big Idea 2 - Data Related to User Guide",
            "content": "Introduction . When building an application that requires users to create accounts or sign in, handling data related to users is crucial. This data can include things like user profiles, preferences, and activity logs, which can be used to personalizing_ the user experience and improving_ the application&#39;s performance. . By learning how to handle data related to users effectively and efficiently, you&#39;ll be equipped with the skills and knowledge needed to build helpful applications that meet the needs of your users. . PLEASE DON&#39;T OPEN THE POPCORN HACKS, WE WILL OPEN THEM DURING THE PRESENTATION . Basics of Class and User Data . Establishing Class/User Data and making a new user . Because Python is an object-oriented programming (OOP) language, everything in it represents an object. Lists, dictionaries, functions, etc. are all examples of Python objects. Generally speaking, a Python object is an entity of _data items and methods describing the behavior of those items. . A Python class is a template used to create Python objects. We can think of it as a cooking recipe, where all the ingredients and their quantities are listed, and the whole process of cooking is described step-by-step. . In this case, we can compare a cake recipe to a class, and a cake cooked following that recipe to an object (i.e., an instance of that class). Using the same recipe (class), we can create many cakes (objects). This is the essence of creating a class in Python: to define data elements and the rules establishing how these elements can interact and change their state — and then use this framework to build various objects in a set way, instead of creating them from scratch every time. . Let&#39;s look at a few examples: . class Bikes: name = &quot;&quot; gear = 0 # create objects of class bike1 = Bikes() # objectName = ClassName() bike2 = Bikes() . Now that we have our class and object defined, we can now run code to modify certain attributes of our objects. . bike1.gear = 11 bike1.name = &quot;Mountain Bike&quot; bike2.gear = 13 bike2.name = &quot;Road Bike&quot; print(f&quot;Name: {bike1.name}, Gears: {bike1.gear} &quot;) . Name: Mountain Bike, Gears: 11 . Popcorn Hacks #1: Add another print command to display the attributes of Bike #2. What output will this code segment produce? print(f&quot;Name: {bike2.name}, Gears: {bike2.gear}&quot;) . Name: Road Bike, Gears: 13 . Example: Defining a User Class . Now we will look into Classes for users of a program or website. . class User: def __init__(self, username, email): self.username = username self.email = email def display_info(self): print(f&quot;Username: {self.username}, Email: {self.email}&quot;) . For this cell, we define a User class with a constructor_ method &quot;init&quot; that takes username and email as arguments_. The display_info method is used to print the user information. . For backend functionality, this class can be used to create, manipulate, and manage user data. For example, when a new user signs up for an account, you could create a new User object with their username and email. This object can then be used to perform various operations, such as validating the user&#39;s input, storing the user&#39;s data in a database, or processing user-related requests. . Now let&#39;s make a new User: . new_user = User(&quot;jeffrey&quot;, &quot;leejeffreysc@gmail.com&quot;) new_user.display_info() . Username: jeffrey, Email: leejeffreysc@gmail.com . Here&#39;s a step-by-step breakdown of how the code relates to backend functionality: . new_user = User(&quot;jeffrey&quot;, &quot;leejeffreysc@gmail.com&quot;): This line creates a new User object, initializing it with the username &quot;jeffrey&quot; and the email &quot;leejeffreysc@gmail.com&quot;. This could represent a user who has just signed up for an account, and the input values would typically come from user input, such as a frontend signup form. . new_user.display_info(): This line calls the display_info method on the new_user object, which prints the user&#39;s information (username and email) to the console. In a real-world backend application, you might use this method or a similar one to display user information in logs, send a welcome email, or create an API response with the user&#39;s data. . User/Class @ Decorators: . A Python Class allows for the use of @ decorators, these allow access to attribute data without the use of functions. . @property decorator (aka getter). This enables developers to &quot;GET&quot; attribute data in a clean method (object.name versus object.get_name()) | @name.setter decorator (aka setter). This enables developers to &quot;UPDATE&quot;/set attribute data in a clean method (object.name = &quot;Jeffrey&quot; versus object.set_name(&quot;Jeffrey&quot;)) | . The getter and setter methods provide a clean and controlled way to _access_ and modify__ the attributes of an object. This can be particularly useful when interacting with databases, APIs, or other parts of a web application that require the management and manipulation of object attributes. . class Student: def __init__(self, student, name): self._student = student self._name = name @property def name(self): return self._name @name.setter def name(self, new_name): self._name = new_name . In this example, the Student class has a name attribute, which is accessed and modified through the name property getter and setter methods. The _name attribute uses an underscore prefix, which is a convention to indicate it should not be accessed directly. . Usage of the getter and setter methods are below: . student = Student(1001, &quot;Derek Sol&quot;) print(student.name) # Get the name using the getter method student.name = &quot;Jagger Klein&quot; # Set the name using the setter method print(student.name) . Derek Sol Jagger Klein . Popcorn Hacks #2: The following code segment for computers does not have getter and setter methods called. Using the missing attributes &quot;model&quot; and &quot;year&quot;, add example getter and setters methods for this class. Show us an example output that this code segment might produce. class Computer: def __init__(self, model, year): self._model = model self._year = year @property def model(self): return self._model @model.setter def model(self, new_model): self._model = new_model @property def year (self): return self._year @year.setter def year(self, new_year): self._year = new_year . computer = Computer(&quot;Apple&quot;, 2018) print(computer.model) # Get the name using the getter method computer.model = &quot;Windows&quot; # Set the name using the setter method print(computer.model) . Apple Windows . class Computer: def __init__(self, model, year): self._model = model self._year = year @property def model(self): return self._model @model.setter def model(self, new_model): self._model = new_model @property def year(self): return self._year @year.setter def year(self, new_year): self._year = new_year . student = Student(1001, &quot;Derek Sol&quot;) print(student.name) # Get the name using the getter method student.name = &quot;Jagger Klein&quot; # Set the name using the setter method print(student.name) . Derek Sol Jagger Klein . Databases and SQLite . A database is a structured collection of data that is organized and stored in a way that allows for efficient retrieval, manipulation, and management of that data. In other words, a database is a software application that allows you to store and manage large amounts of data in an organized manner. . Some Examples of Databases: . Storing and managing customer data, such as contact information, order history, and customer preferences. | Keeping track of inventory levels and stock movements in a warehouse or retail store. | Managing financial transactions, such as payments, invoices, and receipts. | . SQLite is a software application that provides a user-friendly database management system. Unlike other databases, such as MySQL or PostgreSQL, SQLite is programmed within an application, which means it does not require a separate server process to operate. This makes SQLite great for web applications or for use in situations where you don&#39;t need a full database server. . In this lesson, we will be demonstrating how to set up a SQLite database in Flask, a Python web framework. Flask allows programmers to easily interact with SQLite databases, and we&#39;ll walk through the process of setting up a new database, creating tables, and adding data. We&#39;ll also cover some basic SQL commands that you can use to interact with your database, including CREATE TABLE, INSERT, SELECT, UPDATE, and DELETE. . Setting up a SQLite database in Flask . from flask import Flask import sqlite3 # Create a Flask application app = Flask(__name__) # Connect to the SQLite database using SQLite3 conn = sqlite3.connect(&#39;database.db&#39;) # Create a cursor object to execute SQL commands cursor = conn.cursor() # Create a table in the database using SQL commands cursor.execute(&#39;&#39;&#39;CREATE TABLE students (id INTEGER PRIMARY KEY, name TEXT, grade INTEGER)&#39;&#39;&#39;) # Commit the changes to the database conn.commit() # Close the connection conn.close() . Note: This will create a new file &#39;database.db&#39; in the _notebooks folder if one doesn&#39;t exist. . Breaking down this code segment: . We imported the necessary libraries and tools | We created a Flask application | We connected to the SQLite database using SQLite3 | We created a cursor object to execute SQL commands | We created tables in the database using SQL commands | . Flask provides several extensions and tools for working with SQLite databases, including Flask-SQLAlchemy, Flask-SQLite3, and Flask-Admin. These tools provide a high-level interface for interacting with the database, making it easy to perform common operations such as adding, updating, and deleting records. . CRUD Commands with SQLite . CRUD stands for Create, Read, Update, and Delete, which are the basic operations you can perform on data. SQL is useful library because it allows programmers to create new tables to organize data, add new data to a table, update data that&#39;s already there, or delete data that&#39;s no longer needed. . C: To create a new record in a database, you must first define the table structure that will store the data. This can be accomplished using SQL commands such as CREATE. Once the table is created, data can be added to it using the INSERT INTO command. . | R: To retrieve data from the database, you can use the READ command. You can specify which fields you want to retrieve and the conditions you want to apply using the WHERE clause. There are also several functions available to aggregate and manipulate data. . | U: To modify existing data in the database, you can use the UPDATE command. You will need to specify which table and fields you want to update, and the conditions you want to apply using the WHERE clause. . | D: To remove data from the database, you can use the DELETE command. . | . Example of CRUD within an SQLite Database . # from flask import Flask # import sqlite3 # # Create a Flask application # app = Flask(__name__) # # Connect to the SQLite database using SQLite3 # conn = sqlite3.connect(&#39;database.db&#39;) # # Create a cursor object to execute SQL commands # cursor = conn.cursor() # # Create a table in the database using SQL commands # cursor.execute(&#39;&#39;&#39;CREATE TABLE basketball # (_player TEXT PRIMARY KEY, _team TEXT, _position TEXT, _opinion TEXT)&#39;&#39;&#39;) # # Commit the changes to the database # conn.commit() # # Close the connection # conn.close() . Hypothetically, our programmer wanted to create an application about basketball players, and created a new table in SQL to store and interact with user-submitted data. Using the same method as the previous table, a new table &#39;basketball&#39; is created by the cursor and added to the &#39;database.db&#39; file. . Create Function: . def create(): database = &#39;database.db&#39; player = input(&quot;Enter the player name&quot;) team = input(&quot;Enter team name&quot;) position = input(&quot;Enter player position&quot;) opinion = input(&quot;Enter your opinion &quot;) # Connecting to the database, create cursor to execute the SQL command connection = sqlite3.connect(database) cursor = connection.cursor() try: # Execute SQL to insert record in to db cursor.execute(&quot;INSERT INTO basketball (_player, _team, _position, _opinion) VALUES (?, ?, ?, ?)&quot;, (player, team, position, opinion)) # Commit the changes connection.commit() print(f&quot;New basketball with {player} is added.&quot;) except sqlite3.Error as error: print(&quot;Error while inserting record&quot;, error) # Closing cursor and connection cursor.close() connection.close() create() . Error while inserting record UNIQUE constraint failed: basketball._player . The create() feature allows users to input information about a basketball player and store it in a SQLite table &#39;basketball&#39; inside the database file we already created &#39;database.db&#39;. The code prompts the user for the player&#39;s name, team name, position, and their opinion about the player, then establishes a connection to the SQLite database and creates a cursor object for executing SQL commands. . The cursor.execute() method is called with an SQL INSERT command to insert a new entry into the &#39;basketball&#39; table. The connection.commit() method saves the changes to the database, and if the record is inserted successfully, a confirmation message is printed. In case of errors, the except block catches the sqlite3.Error exception and prints an error message. Finally, the cursor and the connection to the database are closed, and the create() function is called to execute the code. . Read Function: . def read(): database = &#39;basketball.db&#39; # Connecting to the database, create cursor to execute the SQL command connection = sqlite3.connect(database) cursor = connection.cursor() # Fetch all the records from basketball table results = cursor.execute(&#39;SELECT * FROM basketball&#39;).fetchall() if len(results) != 0: for row in results: print(row) else: print(&quot;No player found.&quot;) # Closing cursor and connection cursor.close() connection.close() #read() . The read() feature retrieves and prints all entries from the &#39;basketball&#39; table in the specified SQLite database. The script establishes a connection to the SQLite database, creates a cursor object for executing SQL commands, and calls the cursor.execute() method with an SQL SELECT command to fetch all the entires from the &#39;basketball&#39; table. The fetchall() method retrieves all the rows returned by the SELECT command and stores them in the results variable. . The code then checks if there are any records in the table and, if so, iterates through each row in the results using a &#39;for loop&#39; and prints the row. If there are no records, the program prints &quot;No player found&quot;. Finally, the cursor and the connection to the database are closed, and the read() function is called to execute the code. . Update Function: . import sqlite3 def update(): database = &#39;database.db&#39; player = input(&quot;Enter a basketball player to update the opinion for:&quot;) opinion = input(&quot;Enter new opinion:&quot;) # Connecting to the database, create cursor to execute the SQL command connection = sqlite3.connect(database) cursor = connection.cursor() try: # Updating review for the basketball cursor.execute(&quot;UPDATE basketball SET _opinion = ? WHERE _player = ?&quot;, (opinion, player)) if cursor.rowcount != 0: print(f&quot;Review for the basketball is updated to {opinion}&quot;) connection.commit() else: print(f&quot;Player not found.&quot;) except sqlite3.Error as error: print(&quot;Error occurred&quot;, error) # Closing cursor and connection cursor.close() connection.close() #update() . This update feature updates the opinion for a specific basketball player in an SQLite database. The code defines an update() function, which prompts the user to input the basketball player they want to update and the new opinion for that player. The script connects to the SQLite database, creates a cursor object, and handles any potential errors while executing the SQL command. The cursor.execute() method updates the review in the database for the specified basketball item. . If at least one value is changed, a success message is printed and the changes are committed to the database. Otherwise, a &quot;Player not found.&quot; message is displayed. In the except block, if an error occurs, an error message along with specific error details is printed. Finally, the cursor and connection to the database are closed, and the update() function is called to execute the review update process. . Delete Function . import sqlite3 def delete(): database = &#39;basketball.db&#39; player = input(&quot;Enter basketball player to delete&quot;) # Connecting to the database, create cursor to execute the SQL command connection = sqlite3.connect(database) cursor = connection.cursor() try: cursor.execute(&quot;DELETE FROM basketball WHERE _player = ?&quot;, (player,)) if cursor.rowcount == 0: print(f&quot;{player} does not exist&quot;) else: print(f&quot;Successfully deleted basketball player {player}&quot;) connection.commit() except sqlite3.Error as error: print(&quot;Error occurred: &quot;, error) # Closing cursor and connection cursor.close() connection.close() #delete() . The delete feature deletes a specific basketball player from the specified SQLite database. The code defines a delete() function that prompts the user to input the basketball player they want to delete. After connecting to the SQLite database and creating a cursor object, the code handles potential errors while executing the SQL command. The cursor.execute() method is used to delete the basketball item with the specified ID. . If no rows are affected, a message is printed indicating that the basketball player does not exist. Otherwise, a success message is displayed, confirming the basketball player&#39;s deletion. The changes are then committed to the database. In the except block, any error that occurs triggers an error message along with specific error details. Finally, the cursor and connection to the database are closed, and the delete() function is called to execute the basketball item deletion process. This code showcases a practical way to remove information from an SQLite database based on user input. . Menu Functions: . Alongside the four CRUD functions, a menu function is designed to manage Create, Read, Update, Delete operations and display the schema. The menu function is responsible for taking in user inputs and making the program call various functions. When running a menu function, users enter their desired operation, whether it be Create, Read, Update, or Delete, and the input is checked by various conditions to determine which function should be called. Many menu functions are called recursively, so the cell will repeat the menu process until the user decides to exit. . Popcorn Hacks #3: The menu function below is missing some of the CRUD functions for the specified basketball players table. Fix the following code by adding the intended CRUD functions, then perform a READ function on the database. def menu(): operation = input(&quot;Enter: (C)reate (R)ead (U)pdate or (D)elete&quot;) if operation.lower() == &#39;c&#39;: create() elif operation.lower() == &#39;r&#39;: read() elif operation.lower() == &#39;u&#39;: update() elif operation.lower() == &#39;d&#39;: delete() elif len(operation)==0: # Escape Key return else: print(&quot;Please enter c, r, u, or d&quot;) menu() # recursion, repeat menu try: menu() # start menu except: print(&quot;Perform Jupyter &#39;Run All&#39; prior to starting menu&quot;) . Error occurred: no such table: basketball . def menu(): operation = input(&quot;Enter: (C)reate (R)ead (U)pdate or (D)elete&quot;) if operation.lower() == &#39;c&#39;: create() elif len(operation)==0: # Escape Key return else: print(&quot;Please enter c, r, u, or d&quot;) menu() # recursion, repeat menu try: menu() # start menu except: print(&quot;Perform Jupyter &#39;Run All&#39; prior to starting menu&quot;) . Image Uploading with SQLite . Using various Python Libraries, we are able to upload and customize images using python code, as well as using images to interact with databases. . One way to store images in a database is to INSERT the image data as a binary blob. . To store an image as a blob in SQLite, you can first read the image file and convert it to a binary format using a programming language like Python. Here&#39;s an example of how to do this: . Making the Table to store our Image Data: . # #from flask import Flask # import sqlite3 # # Create a Flask application # #app = Flask(__name__) # # Connect to the SQLite database using SQLite3 # conn = sqlite3.connect(&#39;database.db&#39;) # # Create a cursor object to execute SQL commands # cursor = conn.cursor() # # Create a table in the database using SQL commands # cursor.execute(&#39;&#39;&#39;CREATE TABLE images # (name TEXT PRIMARY KEY, data BLOB)&#39;&#39;&#39;) # # Commit the changes to the database # conn.commit() # # Close the connection # conn.close() . We use a new data type &quot;BLOB&quot; to store specific data from our .jpg image. . Adding Image Data to our Table: . You can use this example sunset jpg for our code. Download and place it in the same repository as this notebook. Rename image to &#39;image.jpg&#39; . https://t4.ftcdn.net/jpg/01/04/78/75/360_F_104787586_63vz1PkylLEfSfZ08dqTnqJqlqdq0eXx.jpg . import sqlite3 # Open a connection to the SQLite database conn = sqlite3.connect(&#39;database.db&#39;) # Read the image file as binary data with open(&#39;image.jpg&#39;, &#39;rb&#39;) as jpg: image_data = jpg.read() # Insert the image data into the database conn.execute(&quot;INSERT INTO images (name, data) VALUES (?, ?)&quot;, (&#39;image.jpg&#39;, image_data)) # Commit the transaction conn.commit() # Close the connection conn.close() . In this example, the image data is read from the &quot;image.jpg&quot; file and inserted into the &quot;images&quot; table in the &quot;database.db&quot; SQLite database. The image data is then stored as a binary blob in the &quot;data&quot; column of the table. . Converting BLOB to Image -&gt; Displaying Image . import sqlite3 from PIL import Image import io # Open a connection to the SQLite database conn = sqlite3.connect(&#39;database.db&#39;) # Retrieve the image data from the database result = conn.execute(&quot;SELECT data FROM images WHERE name=?&quot;, (&#39;image.jpg&#39;,)).fetchone() # Convert the binary data to an image object image_data = io.BytesIO(result[0]) image = Image.open(image_data) # Display the image image.show() # Close the connection conn.close() . The image data is then retrieved from the &quot;images&quot; table using a SELECT statement with a WHERE clause that correctly matches the image name. The binary image data is then converted to an image object using the PIL library and displayed on the screen. . Popcorn Hacks #4: Using the same table, find a new .jpg image and add its image data to the database. Display the image using the PIL Library and show us the output image. import sqlite3 from PIL import Image import io # Open a connection to the SQLite database conn = sqlite3.connect(&#39;database.db&#39;) # Read the image file as binary data with open(&#39;green.jpg&#39;, &#39;rb&#39;) as jpg: image_data = jpg.read() # Insert the image data into the database conn.execute(&quot;INSERT INTO images (name, data) VALUES (?, ?)&quot;, (&#39;green.jpg&#39;, image_data)) Commit the transaction conn.commit() # Close the connection conn.close() # Open a connection to the SQLite database conn = sqlite3.connect(&#39;database.db&#39;) # Retrieve the image data from the database result = conn.execute(&quot;SELECT data FROM images WHERE name=?&quot;, (&#39;green&#39;,)).fetchone() # Convert the binary data to an image object image_data = io.BytesIO(result[0]) image = Image.open(image_data) # Display the image image.show() # Close the connection conn.close() . HACKS (Due Sunday 11:59 PM) . Make sure to fill in all blank notes and popcorn hacks, and run each of the interactive coding exercises. (0.45) . Extra Credit: Winning team for Popcorn Hacks (+0.05) | . Create your own SQL database and create an algorithm that can insert, update, and delete data related to your topic of choice. Functionality for adding image data MUST be included. Points will be awarded based on effort and success. (0.45) . Extra Credit: Connect your backend database to a visible frontend! Screenshots of displayed data is fine. (+0.05) | . from flask import Flask import sqlite3 # Create a Flask application app = Flask(__name__) # Connect to the SQLite database using SQLite3 conn = sqlite3.connect(&#39;database.db&#39;) # Create a cursor object to execute SQL commands cursor = conn.cursor() # Create a table in the database using SQL commands cursor.execute(&#39;&#39;&#39;CREATE TABLE icecream (_brand TEXT PRIMARY KEY, _icecream TEXT, _recommend TEXT)&#39;&#39;&#39;) # Commit the changes to the database conn.commit() # Close the connection conn.close() . def create(): database = &#39;database.db&#39; brand = input(&quot;Enter the brand name&quot;) icecream = input(&quot;Enter the flavor&quot;) recommend = input(&quot;Do you recommend?&quot;) # Connecting to the database, create cursor to execute the SQL command connection = sqlite3.connect(database) cursor = connection.cursor() try: # Execute SQL to insert record in to db cursor.execute(&quot;INSERT INTO icecream (_brand, _icecream, _recommend) VALUES (?, ?, ?)&quot;, (brand, icecream, recommend)) # Commit the changes connection.commit() print(f&quot;New water with {brand} is added.&quot;) except sqlite3.Error as error: print(&quot;Error while inserting record&quot;, error) # Closing cursor and connection cursor.close() connection.close() create() . New water with baskin robbins is added. . def read(): database = &#39;database.db&#39; # Connecting to the database, create cursor to execute the SQL command connection = sqlite3.connect(database) cursor = connection.cursor() # Fetch all the records from water table results = cursor.execute(&#39;SELECT * FROM icecream&#39;).fetchall() if len(results) != 0: for row in results: print(row) else: print(&quot;No icecream found.&quot;) # Closing cursor and connection cursor.close() connection.close() read() . (&#39;baskin robbins&#39;, &#39;mint chocolate chip&#39;, &#39;yes&#39;) . import sqlite3 def update(): database = &#39;database.db&#39; brand = input(&quot;Enter a brand to update the review for:&quot;) recommend = input(&quot;Do you change your recommendations&quot;) # Connecting to the database, create cursor to execute the SQL command connection = sqlite3.connect(database) cursor = connection.cursor() try: # Updating review for the water cursor.execute(&quot;UPDATE icecream SET _recommend = ? WHERE _brand = ?&quot;, (recommend, brand)) if cursor.rowcount != 0: print(f&quot;Review for the icecream is updated to {recommend}&quot;) connection.commit() else: print(f&quot;Icecream not found.&quot;) except sqlite3.Error as error: print(&quot;Error occurred&quot;, error) # Closing cursor and connection cursor.close() connection.close() update() . Review for the icecream is updated to no . import sqlite3 def delete(): database = &#39;database.db&#39; brand = input(&quot;Enter icecream brand to delete&quot;) # Connecting to the database, create cursor to execute the SQL command connection = sqlite3.connect(database) cursor = connection.cursor() try: cursor.execute(&quot;DELETE FROM icecream WHERE _brand = ?&quot;, (brand,)) if cursor.rowcount == 0: print(f&quot;{brand} does not exist&quot;) else: print(f&quot;Successfully deleted icecream {brand}&quot;) connection.commit() except sqlite3.Error as error: print(&quot;Error occurred: &quot;, error) # Closing cursor and connection cursor.close() connection.close() #delete() . from flask import Flask import sqlite3 # Create a Flask application app = Flask(__name__) # Connect to the SQLite database using SQLite3 conn = sqlite3.connect(&#39;database.db&#39;) # Create a cursor object to execute SQL commands cursor = conn.cursor() # Create a table in the database using SQL commands cursor.execute(&#39;&#39;&#39;CREATE TABLE icecreamimages (name TEXT PRIMARY KEY, data BLOB)&#39;&#39;&#39;) # Commit the changes to the database conn.commit() # Close the connection conn.close() . def menu(): operation = input(&quot;Enter: (C)reate (R)ead (U)pdate or (D)elete&quot;) if operation.lower() == &#39;c&#39;: create() elif operation.lower() == &#39;r&#39;: read() elif operation.lower() == &#39;u&#39;: update() elif operation.lower() == &#39;d&#39;: delete() elif len(operation)==0: # Escape Key return else: print(&quot;Please enter c, r, u, or d&quot;) menu() # recursion, repeat menu try: menu() # start menu except: print(&quot;Perform Jupyter &#39;Run All&#39; prior to starting menu&quot;) . Review for the icecream is updated to yes . import sqlite3 # Open a connection to the SQLite database conn = sqlite3.connect(&#39;database.db&#39;) # Read the image file as binary data with open(&#39;baskin.jpg&#39;, &#39;rb&#39;) as jpg: image_data = jpg.read() # Insert the image data into the database conn.execute(&quot;INSERT INTO icecream (_brand, _recommend) VALUES (?, ?)&quot;, (&#39;baskin&#39;, image_data)) # Commit the transaction conn.commit() # Close the connection conn.close() . import sqlite3 from PIL import Image import io # Open a connection to the SQLite database conn = sqlite3.connect(&#39;database.db&#39;) # Retrieve the image data from the database result = conn.execute(&quot;SELECT _recommend FROM icecream WHERE _recommend=?&quot;, (&#39;icecream&#39;,)).fetchone() # Convert the binary data to an image object image_data = io.BytesIO(result[0]) image = Image.open(image_data) # Display the image image.show() # Close the connection conn.close() . The images are too large and aren&#39;t working so the notebook won&#39;t show up right and this github file can&#39;t show images. But I have the code that you can look at and see my effort. Thanks! .",
            "url": "https://linaawad1.github.io/linas-fastpages/2023/04/27/P3M-Team-SnapShot-Student.html",
            "relUrl": "/2023/04/27/P3M-Team-SnapShot-Student.html",
            "date": " • Apr 27, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "P3-M 4/21 Binary Overview - Lina Awad Hack's",
            "content": "How to contact us . Join the &quot;coding&quot; channel on slack! That is the only place where we will be answering questions or sending announcements about lessons. If you have a question please contact us there. . How to join . Click on &quot;add channels&quot; below the list of channels | Click on &quot;browse channels&quot; | Search for &quot;coding&quot; | Click the green &quot;Join&quot; button on the right | . Learning Objectives . DAT-1.A: Representing Data with Bits . Basic Information . Bit is short for __binary digit, and represents a value of either 0 or 1. A byte is 8 bits. | . | Sequences of bits are used to represent different things. Representing data with sequences of bits is called _abstraction__. | . | . Practice Questions: . How many bits are in 3 bytes? | There are 24 bits in 3 bytes | . What digital information can be represented by bits? | numbers and text. Choices like yes or no, on or off, etc. Bits can represent different forms of text and how it works. | . Are bits an analog or digital form of storing data? What is the difference between the two? | bits are a digital form of storing data. This difference is that digital is only either 1 or 2, not anything else, and analog can be more. | . Examples . Boolean variables (true or false) are the easiest way to visualize binary. 0 = False | 1 = True | . | . import random def example(runs): # Repeat code for the amount of runs given while runs &gt; 0: # Assigns variable boolean to either True or False based on random binary number 0 or 1. boolean = False if random.randint(0, 1) == 0 else True # If the number was 1 (True), it prints &quot;awesome.&quot; if boolean: print(&quot;binary is awesome&quot;) # If the number was 2 (False), it prints &quot;cool.&quot; else: print(&quot;binary is cool&quot;) runs -= 1 # Change the parameter to how many times to run the function. example(10) . binary is awesome binary is awesome binary is cool binary is cool binary is awesome binary is cool binary is awesome binary is awesome binary is cool binary is awesome . DAT-1.B: The Consequences of Using Bits to Represent Data . Basic Information . Integers are represented by a fixed number of bits, this limits the range of integer values. This limitation can result in overflow or other errors. | Other programming languages allow for abstraction only limited by the computers memory. | Fixed number of bits are used to represent real numbers/limits | . Practice Questions: . What is the largest number can be represented by 5 bits? | 1 + 2 + 2^2 + 2^3 + 2^4 + 2^5 | The largest number that can be represented by 5 bits is 31. | . One programming language can only use 16 bits to represent non-negative numbers, while a second language uses 56 bits to represent numbers. How many times as many unique numbers can be represented by the second language? | 56-16=40 =&gt; 2^40 | . 5 bits are used to represent both positive and negative numbers, what is the largest number that can be represented by these bits? (hint: different thatn question 1) | The first bit represents whether it is positive or negative, so it would be the largest four bit number. So the largest number is 15. | . Examples . import math def exponent(base, power): # Print the operation performed, turning the parameters into strings to properly concatenate with the symbols &quot;^&quot; and &quot;=&quot;. print(str(base) + &quot;^&quot; + str(power) + &quot; = &quot; + str(math.pow(base, power))) # How can function become a problem? (Hint: what happens if you set both base and power equal to high numbers?) exponent(156, 257) . OverflowError Traceback (most recent call last) /Users/linaalsheikh-eid/vscode/linas-fastpages/_notebooks/2023-04-21-P3M-BinaryLesson.ipynb Cell 6 in &lt;cell line: 8&gt;() &lt;a href=&#39;vscode-notebook-cell:/Users/linaalsheikh-eid/vscode/linas-fastpages/_notebooks/2023-04-21-P3M-BinaryLesson.ipynb#W5sZmlsZQ%3D%3D?line=4&#39;&gt;5&lt;/a&gt; print(str(base) + &#34;^&#34; + str(power) + &#34; = &#34; + str(math.pow(base, power))) &lt;a href=&#39;vscode-notebook-cell:/Users/linaalsheikh-eid/vscode/linas-fastpages/_notebooks/2023-04-21-P3M-BinaryLesson.ipynb#W5sZmlsZQ%3D%3D?line=6&#39;&gt;7&lt;/a&gt; # How can function become a problem? (Hint: what happens if you set both base and power equal to high numbers?) -&gt; &lt;a href=&#39;vscode-notebook-cell:/Users/linaalsheikh-eid/vscode/linas-fastpages/_notebooks/2023-04-21-P3M-BinaryLesson.ipynb#W5sZmlsZQ%3D%3D?line=7&#39;&gt;8&lt;/a&gt; exponent(156, 257) /Users/linaalsheikh-eid/vscode/linas-fastpages/_notebooks/2023-04-21-P3M-BinaryLesson.ipynb Cell 6 in exponent(base, power) &lt;a href=&#39;vscode-notebook-cell:/Users/linaalsheikh-eid/vscode/linas-fastpages/_notebooks/2023-04-21-P3M-BinaryLesson.ipynb#W5sZmlsZQ%3D%3D?line=2&#39;&gt;3&lt;/a&gt; def exponent(base, power): &lt;a href=&#39;vscode-notebook-cell:/Users/linaalsheikh-eid/vscode/linas-fastpages/_notebooks/2023-04-21-P3M-BinaryLesson.ipynb#W5sZmlsZQ%3D%3D?line=3&#39;&gt;4&lt;/a&gt; # Print the operation performed, turning the parameters into strings to properly concatenate with the symbols &#34;^&#34; and &#34;=&#34;. -&gt; &lt;a href=&#39;vscode-notebook-cell:/Users/linaalsheikh-eid/vscode/linas-fastpages/_notebooks/2023-04-21-P3M-BinaryLesson.ipynb#W5sZmlsZQ%3D%3D?line=4&#39;&gt;5&lt;/a&gt; print(str(base) + &#34;^&#34; + str(power) + &#34; = &#34; + str(math.pow(base, power))) OverflowError: math range error . DAT-1.C: Binary Math . Basic Information . Binary is Base 2, meaning each digit can only represent values of 0 and 1. | Decimal is Base 10, meaning eacht digit can represent values from 0 to 9. | Conversion between sequences of binary to decimal depend on how many binary numbers there are, their values and their positions. | . Practice Questions: . What values can each digit of a Base 5 system represent? | 5 digits, 0-4 | . What base is Hexadecimal? What range of values can each digit of Hexadecimal represent? | Base 16, 0-15 | . When using a base above 10, letters can be used to represent numbers past 9. These letters start from A and continue onwards. For example, the decimal number 10 is represented by the letter A in Hexadecimal. What letter would be used to represent the Base 10 number 23 in a Base 30 system? What about in a Base 50 system? | W, 23 | . Examples . Using 6 bits, we can represent 64 numbers, from 0 to 63, as 2^6 = 64. | The numbers in a sequence of binary go from right to left, increasing by powers of two from 0 to the total amount of bits. The whole number represented is the sum of these bits. For example: 111111 | 2^5 + 2^4 + 2^3 + 2^2 + 2^1 + 2^0 | 32 + 16 + 8 + 4 + 2 + 1 | 63 | | Fill in the blanks (convert to decimal) . 001010 = 2^1 + 2^3 = 10 | 11100010 = 2^1 + 2^5 + 2^6 + 2^7 = 128 + 64 + 32 + 2 = 226 | 10 = 2^1 = 2 | | Fill in the blanks (convert to binary) . 12 = 1100 | 35 = 100011 | 35/2=17+1 | 17/2=8+1 | 8/2=4+0 | 4/2=2+0 | 2/2=1+0 | 1/2=0+1 | . 256 = 100000000 | | . Hacks &amp; Grading (Due SUNDAY NIGHT 4/23) . Complete all of the popcorn hacks (Fill in the blanks + run code cells and interact + Answer ALL questions) [0.3 or nothing] | Create a program to conduct basic mathematical operations with binary sequences (addition, subtraction, multiplication, division) [0.6 or nothing] For bonus, program must be able to conduct mathematical operations on binary sequences of varying bits (for example: 101 + 1001 would return decimal 14.) [0.1 or nothing] | . | . def dectobin(num): # decimal to binary representation if num &gt; 1: # If the number is greater than 1, dectobin(num // 2) # divide the number by 2 repeatedly print(num % 2, end=&quot;&quot;) #print the binary subsequently def math(): a = int(input(&quot;choose your first number: &quot;)) # input value b = int(input(&quot;choose your second number: &quot;)) # input value operation = input(&quot;Select one of the following commands for each number: addition, subtraction, multiplication, division: &quot;) # choose the math operation if operation == &quot;addition&quot;: result = a + b # shows addition elif operation == &quot;subtract&quot;: result = a - b # shows subtraction elif operation == &quot;multiply&quot;: result = a * b # shows multiplication elif operation == &quot;divide&quot;: result = a / b # shows division remainders = [] # stores the remainders in appending order as listed below while result &gt; 1: # convert to binary quotient, remainder = divmod(result, 2) # dividing the number by two and having a remainder remainders.append(remainder) # the remainders must be in a reverse order print(f&quot;{result} divided by 2 is {quotient} with a remainder of {remainder}&quot;) # print the division and remainder to see math result = quotient # the result of the code remainders.append(result) # the remainders being a result in reverse order or appended binary = &quot;&quot;.join(map(str, remainders[::-1])) # for binary the remainders must end at the end print(f&quot;{result} divided by 2 is {result // 2} with a remainder of {result % 2}&quot;) # print maths print(f&quot;binary of {operation}({a}, {b}): {binary}&quot;) # print final binary result math() # operation . 8 divided by 2 is 4 with a remainder of 0 4 divided by 2 is 2 with a remainder of 0 2 divided by 2 is 1 with a remainder of 0 1 divided by 2 is 0 with a remainder of 1 binary of addition(4, 4): 1000 .",
            "url": "https://linaawad1.github.io/linas-fastpages/student/2023/04/21/P3M-BinaryLesson.html",
            "relUrl": "/student/2023/04/21/P3M-BinaryLesson.html",
            "date": " • Apr 21, 2023"
        }
        
    
  
    
        ,"post4": {
            "title": "2018 Quiz Blog",
            "content": ". Question Review . Final Score = 64/66 . Question 1 . . My Answer: C | . Why did I choose this? . I chose C probably because I misread the whole question and because looking now that was already included in the question | . Why was it wrong? . This option is incorrect. The code segment never changes the value of second. . | Right Answer: B . | . Why? . The code segment assigns the initial value of first to temp, then assigns the initial value of second to first. The initial value of first, which has been stored in temp, is then assigned to second. Therefore, the initial values of first and second have been interchanged. | . Question 3 . . My Answer: A | . Why did I choose this? . I chose option A because I thought it would give a more diverse look to see many people in one place. But now I see how there wouldn’t be a need to use a distributed approach. | . Why was it wrong? . If the participants must all be in the same location, there would be no need to use a distributed approach. . | Right Answer: C . | . Why? . If data measurements need to be taken from many locations, it would be beneficial to have participants from around the world collect the data. | . Reflections . Overall, I did a lot better than normal. When I struggled I looked up answers but this time I was more mindful to really look and understand the question. I also took my time and was more dilligent taking this quiz in comparison to normal. | .",
            "url": "https://linaawad1.github.io/linas-fastpages/final/2023/04/18/2018quiz.html",
            "relUrl": "/final/2023/04/18/2018quiz.html",
            "date": " • Apr 18, 2023"
        }
        
    
  
    
        ,"post5": {
            "title": "CPT Draft",
            "content": "",
            "url": "https://linaawad1.github.io/linas-fastpages/cpt/2023/04/17/CPTdraft.html",
            "relUrl": "/cpt/2023/04/17/CPTdraft.html",
            "date": " • Apr 17, 2023"
        }
        
    
  
    
        ,"post6": {
            "title": "Computers and Networks (Unit 4)",
            "content": "Requirements . Work through College Board Unit 4… blog, add definitions, and pictures. Be creative, for instance make a story of Computing and Networks that is related to your PBL experiences this year. . How a Computer Works . As we have learned, a computer needs aa program to do something smart. The sequence of a program initiates a series of actions with the computers Central Processing Unit (CPU). This component is essentially a binary machine focussing on program instructions provided. The CPU retrieives and stores the data it acts upon in Random Access Memory (RAM). Between the CPU, RAM, and Storage Devices a computer can work with many programs and large amounts of data. . List specification of your Computer, or Computers if working as Pair/Trio . Processor GHz: 1.1 | Memory in GB: 8 | Storage in GB: 332.97/500 | OS: MacOS Big Sur version 11.7.4 | . Define or describe usage of Computer using Computer Programs. Pictures are preferred over a lot of text. Use your experience. . Input devices: keyboards, microphones, cameras, mouses, scanners, where users input/interact with a computer, a hardware device that sends data to a computer, allowing you to interact with and control it. | Output devices | Program File | Program Code | Processes: top | Ports | Data File: json for input and output, .db file is a data file | Inspect Running Code: click inspect then you can see the code running, see it using python or jupyter notebooks, tomatoes and breakpoints, | Inspect Variables | . . The Internet . Watch/review College Board Daily Video for 4.1.1 . Essential Knowledge A computing device is a physical artifact that can run a program. Some examples include computers, tablets, servers, routers, and smart sensors. | A computing system is a group of computing devices and programs working together for a common purpose. | A computer network is a group of interconnected computing devices capable of sending or receiving data. | A computer network is a type of computing system. | A path between two computing devices on a computer network (a sender and a receiver) is a sequence of directly connected computing devices that begins at the sender and ends at the receiver. | Routing is the process of finding a path from sender to receiver. | The bandwidth of a computer network is the maximum amount of data that can be sent in a fixed amount of time. | Bandwidth is usually measured in bits per second | . | Complete Vocabulary Matching Activity. Incorporate this into your learnings from year. To analyze measure path and latency use traceroute and ping commands from Linux Terminal. Path | Route | Computer System | Computer Device | Bandwidth | Computer Network | . | . Watch/review College Board Daily Video 4.1.2 . Complete True of False Questions T | F | F | T | F | F | T | . | Essential Knowledge The internet is a computer network consisting of interconnected networks that use standardized, open (nonproprierary) communication protocols. | Access to the internet depends on the ability to connect a computing device to an internet connected device. | A protocol is an agreed-upon set of rules that specify the behavior of a system. | The protocols used in the internet are open, which allows users to easily connect additional computing devices to the internet. | Routing on the internet is usually dynamic; it is not specified in advance | The scalability of a system is the capacity for the system to change in size and scale to meet new demands. | The internet was designed to be scalable | Information is passed through the internet as a data stream. Data streams contain chunks of data, which are encapsulated in packets. | Packets contain a chunk of data and metadata used for routing the packet between the origin and the destination on the internet, as well as for data reassembly. | Packets may arrive at the destination in order, out of order, or not at all | IP, TCP and UDP are common protocols used on the internet. | The world wide web is a system of linked pages, programs, and files. | HTTP is a protocol used by the world wide web | The world wide web uses the internet | . | Go over AP videos, vocabulary, and essential knowledge. Draw a diagram showing the internet and its many levels. A preferred diagram would using your knowledge of frontend, backend, deployment, etc. Picture would highligh vocabulary by illustration. The below illustration have some ideas | . . Often we draw pictures of machines communicating over the Internet with arrows. However, the real communication goes through protocol layers and the machine and then is trasported of the network. For College Board and future Computer Knowledge you should become familiar with the following … | . User Machine &lt;&gt; Frontend Server &lt;&gt; Backend Server +--+ +--+ +--+ | Browser | | GH Page | | Flask | +--+ ^ +--+ ^ +--+ | HTTP | | | HTTP | | | HTTP | +--+ | +--+ | +--+ | TCP | | | TCP | | | TCP | +--+ | +--+ | +--+ | IP | V | IP | V | IP | +--+ +--+ +--+ | Network | &lt;&gt; | Network | &lt;&gt; | Network | +--+ +--+ +--+ . The “http” layer is an application layer protocol in the TCP/IP stack, used for communication between web browsers and web servers. It is the protocol used for transmitting data over the World Wide Web. . The “transport” layer (TCP) is responsible for providing reliable data transfer between applications running on different hosts. The TCP protocol segments the data into smaller chunks called “segments”. Each segment contains a sequence number that identifies its position in the original stream of data, as well as other control information such as source and destination port numbers, and checksums for error detection. . The “ip” layer is responsible for packetizing data received from the TCP layer of the protocol stack, and then encapsulating the data into IP packets. The IP packets are then sent to the lower layers of the protocol stack for transmission over the network. . The “network” layer is responsible for routing data packets between networks using the Internet Protocol (IP). This layer handles tasks such as packet addressing and routing, fragmentation and reassembly, and network congestion control. . Fault Tolerance . Watch both Daily videos for 4.2 . Complete the network activity, summarize your understanding of fault tolerance. | . Question 1: Which of the following is NOT a benefit of fault tolerance . Parallel and Distributed Computing . Review previous lecture on Parallel Computing and watch Daily vidoe 4.3. Think of ways to make something in you team project to utilize Cores more effectively. Here are some thoughts to add to your story of Computers and Networks… . What is naturally Distributed in Frontend/Backend archeticture? . | Analyze this command in Docker: ENV GUNICORN_CMD_ARGS=&quot;--workers=1 --bind=0.0.0.0:8086&quot;. Determine if there is options are options in this command for parallel computing within the server that runs python/gunicorn. Here is an article . | . Last week we discussed parallel computing on local machine. There are many options. Here is something to get parallel computing work with a tool called Ray. . Review this article… Can you get parallel code on images to work more effectively? I have not tried Ray. | . Code example from ChatGPT using squares. This might be more interesting if nums we generated to be a lot bigger. | . import ray # define a simple function that takes a number and returns its square def square(x): return x * x # initialize Ray ray.init() # create a remote function that squares a list of numbers in parallel @ray.remote def square_list(nums): return [square(num) for num in nums] # define a list of numbers to square nums = [1, 2, 3, 4, 5] # split the list into two parts split_idx = len(nums) // 2 part1, part2 = nums[:split_idx], nums[split_idx:] # call the remote function in parallel on the two parts part1_result = square_list.remote(part1) part2_result = square_list.remote(part2) # get the results and combine them result = ray.get(part1_result) + ray.get(part2_result) # print the result print(result) . Computing and Network Diagrams .",
            "url": "https://linaawad1.github.io/linas-fastpages/2023/04/05/AP_computers_networks.html",
            "relUrl": "/2023/04/05/AP_computers_networks.html",
            "date": " • Apr 5, 2023"
        }
        
    
  
    
        ,"post7": {
            "title": "Data Structures- Hashmaps, Sets, Hash Tables, Hashing and Collisions",
            "content": "What is a Hashtable/Hashmap? . A hashtable is a data structure that with a collection of key-value pairs, where each key maps to a value, and the keys must be unique and hashable. . In Python there is a built in hashtable known as a _dictionaries_. | . The primary purpose of a hashtable is to provide efficient lookup, insertion, and deletion operations. When an element is to be inserted into the hashtable, a hash function is used to map the key to a specific index in the underlying array that is used to store the key-value pairs. The value is then stored at that index. When searching for a value, the hash function is used again to find the index where the value is stored. . The key advantage of a hashtable over other data structures like arrays and linked lists is its average-case time complexity for lookup, insertion, and deletion operations. . The typical time complexity of a hashtable is a__. | . What is Hashing and Collision? . Hashing is the process of mapping a given key to a value in a hash table or hashmap, using a hash function. The hash function takes the key as input and produces a hash value or hash code, which is then used to determine the index in the underlying array where the value is stored. The purpose of hashing is to provide a quick and efficient way to access data, by eliminating the need to search through an entire data structure to find a value. . However, it is possible for two different keys to map to the same hash value, resulting in a collision. When a collision occurs, there are different ways to resolve it, depending on the collision resolution strategy used. . Python&#39;s dictionary implementation is optimized to handle collisions efficiently, and the performance of the dictionary is generally very good, even in the presence of collisions. However, if the number of collisions is very high, the performance of the dictionary can degrade, so it is important to choose a good hash function that minimizes collisions when designing a Python dictionary. . What is a Set? . my_set = set([1, 2, 3, 2, 1]) print(my_set) # What do you notice in the output? # I notice 1, 2, 3 in the result # They are also held by curly brackets # It also got rid of the duplicates # Why do you think Sets are in the same tech talk as Hashmaps/Hashtables? # I think sets are in the same tech talk as hashmaps and hashtables because it is printing the information we have # It also gets rid of the duplicates and they both can&#39;t have duplicates . {1, 2, 3} . Dictionary Example . Below are just some basic features of a dictionary. As always, documentation is always the main source for all the full capablilties. . lover_album = { &quot;title&quot;: &quot;Lover&quot;, &quot;artist&quot;: &quot;Taylor Swift&quot;, &quot;year&quot;: 2019, &quot;genre&quot;: [&quot;Pop&quot;, &quot;Synth-pop&quot;], &quot;tracks&quot;: { 1: &quot;I Forgot That You Existed&quot;, 2: &quot;Cruel Summer&quot;, 3: &quot;Lover&quot;, 4: &quot;The Man&quot;, 5: &quot;The Archer&quot;, 6: &quot;I Think He Knows&quot;, 7: &quot;Miss Americana &amp; The Heartbreak Prince&quot;, 8: &quot;Paper Rings&quot;, 9: &quot;Cornelia Street&quot;, 10: &quot;Death By A Thousand Cuts&quot;, 11: &quot;London Boy&quot;, 12: &quot;Soon You&#39;ll Get Better (feat. Dixie Chicks)&quot;, 13: &quot;False God&quot;, 14: &quot;You Need To Calm Down&quot;, 15: &quot;Afterglow&quot;, 16: &quot;Me! (feat. Brendon Urie of Panic! At The Disco)&quot;, 17: &quot;It&#39;s Nice To Have A Friend&quot;, 18: &quot;Daylight&quot; } } # What data structures do you see? # I see meta deta maybe? # I also see data being stored by index # I see a list in the genre # I see the dictionary in the track list # Printing the dictionary print(lover_album) . {&#39;title&#39;: &#39;Lover&#39;, &#39;artist&#39;: &#39;Taylor Swift&#39;, &#39;year&#39;: 2019, &#39;genre&#39;: [&#39;Pop&#39;, &#39;Synth-pop&#39;], &#39;tracks&#39;: {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;}} . print(lover_album.get(&#39;tracks&#39;)) # or print(lover_album[&#39;tracks&#39;]) . {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;} {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;} . print(lover_album.get(&#39;tracks&#39;)[4]) # or print(lover_album[&#39;tracks&#39;][4]) . The Man The Man . lover_album[&quot;producer&quot;] = set([&#39;Taylor Swift&#39;, &#39;Jack Antonoff&#39;, &#39;Joel Little&#39;, &#39;Taylor Swift&#39;, &#39;Louis Bell&#39;, &#39;Frank Dukes&#39;]) # What can you change to make sure there are no duplicate producers? # # # Printing the dictionary print(lover_album) . {&#39;title&#39;: &#39;Lover&#39;, &#39;artist&#39;: &#39;Taylor Swift&#39;, &#39;year&#39;: 2019, &#39;genre&#39;: [&#39;Pop&#39;, &#39;Synth-pop&#39;], &#39;tracks&#39;: {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;}, &#39;producer&#39;: {&#39;Joel Little&#39;, &#39;Jack Antonoff&#39;, &#39;Taylor Swift&#39;, &#39;Frank Dukes&#39;, &#39;Louis Bell&#39;}} . lover_album[&quot;tracks&quot;].update({19: &quot;All Of The Girls You Loved Before&quot;}) # How would add an additional genre to the dictionary, like electropop? # # # Printing the dictionary print(lover_album) . {&#39;title&#39;: &#39;Lover&#39;, &#39;artist&#39;: &#39;Taylor Swift&#39;, &#39;year&#39;: 2019, &#39;genre&#39;: [&#39;Pop&#39;, &#39;Synth-pop&#39;], &#39;tracks&#39;: {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;, 19: &#39;All Of The Girls You Loved Before&#39;}, &#39;producer&#39;: {&#39;Joel Little&#39;, &#39;Jack Antonoff&#39;, &#39;Taylor Swift&#39;, &#39;Frank Dukes&#39;, &#39;Louis Bell&#39;}} . for k,v in lover_album.items(): # iterate using a for loop for key and value print(str(k) + &quot;: &quot; + str(v)) # Write your own code to print tracks in readable format # # . title: Lover artist: Taylor Swift year: 2019 genre: [&#39;Pop&#39;, &#39;Synth-pop&#39;] tracks: {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;, 19: &#39;All Of The Girls You Loved Before&#39;} producer: {&#39;Joel Little&#39;, &#39;Jack Antonoff&#39;, &#39;Taylor Swift&#39;, &#39;Frank Dukes&#39;, &#39;Louis Bell&#39;} . def search(): search = input(&quot;What would you like to know about the album?&quot;) if lover_album.get(search.lower()) == None: print(&quot;Invalid Search&quot;) else: print(lover_album.get(search.lower())) search() # This is a very basic code segment, how can you improve upon this code? # error checking in this code # . Invalid Search . Hacks . Answer ALL questions in the code segments | Create a diagram or comparison illustration (Canva). What are the pro and cons of using this data structure? | Dictionary vs List | . | Expand upon the code given to you, possible improvements in comments | Build your own album showing features of a python dictionary . | For Mr. Yeung&#39;s class: Justify your favorite Taylor Swift song, answer may effect seed . | . reputation_album = { &quot;title&quot;: &quot;Reputation&quot;, &quot;artist&quot;: &quot;Taylor Swift&quot;, &quot;year&quot;: 2017, &quot;genre&quot;: [&quot;Pop&quot;], &quot;tracks&quot;: { 1: &quot;...Ready for it?&quot;, 2: &quot;End Game&quot;, 3: &quot;I Did Something Bad&quot;, 4: &quot;Don&#39;t Blame Me&quot;, 5: &quot;Delicate&quot;, 6: &quot;Look What You Made Me Do&quot;, 7: &quot;So It Goes...&quot;, 8: &quot;Gorgeous&quot;, 9: &quot;Getaway Car&quot;, 10: &quot;King of My Heart&quot;, 11: &quot;Dancing With Our Hand Tied&quot;, 12: &quot;Dress&quot;, 13: &quot;This Is Why We Can&#39;t Have Nice Things&quot;, 14: &quot;Call It What You Want&quot;, 15: &quot;New Year&#39;s Day&quot;, } } print(reputation_album) . {&#39;title&#39;: &#39;Reputation&#39;, &#39;artist&#39;: &#39;Taylor Swift&#39;, &#39;year&#39;: 2017, &#39;genre&#39;: [&#39;Pop&#39;], &#39;tracks&#39;: {1: &#39;...Ready for it?&#39;, 2: &#39;End Game&#39;, 3: &#39;I Did Something Bad&#39;, 4: &#34;Don&#39;t Blame Me&#34;, 5: &#39;Delicate&#39;, 6: &#39;Look What You Made Me Do&#39;, 7: &#39;So It Goes...&#39;, 8: &#39;Gorgeous&#39;, 9: &#39;Getaway Car&#39;, 10: &#39;King of My Heart&#39;, 11: &#39;Dancing With Our Hand Tied&#39;, 12: &#39;Dress&#39;, 13: &#34;This Is Why We Can&#39;t Have Nice Things&#34;, 14: &#39;Call It What You Want&#39;, 15: &#34;New Year&#39;s Day&#34;}} . def reputation_favorite(): song = input(&quot;Type your favorite song on reputation: &quot;) if song in reputation_album[&quot;tracks&quot;].values(): print(&quot;Good Choice!&quot;) else: print(&quot;Hm...I&#39;ve never heard this song on reputation by Taylor Swift?&quot;) reputation_favorite() . Good Choice! . alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot; alphabetList = [] for i in alphabet: alphabetList.append(i) print(alphabetList) . The kernel failed to start due to the missing module &#39;prompt_toolkit.formatted_text&#39;. Consider installing this module. Click &lt;a href=&#39;https://aka.ms/kernelFailuresMissingModule&#39;&gt;here&lt;/a&gt; for more info. .",
            "url": "https://linaawad1.github.io/linas-fastpages/2023/03/29/DS-hashmaps.html",
            "relUrl": "/2023/03/29/DS-hashmaps.html",
            "date": " • Mar 29, 2023"
        }
        
    
  
    
        ,"post8": {
            "title": "CSUSM",
            "content": "Notes on lesson . Their story . Worked through a lot of failures in her time taking these hard classes | Failures don’t define you | Had a good support system at Cal State | Went to palomar college right after high school | It was interesting and he got his bachelor degree in computer science. | . Fun Facts . Newer cal states that was once farm | Whole new engineering building and theres a lot of improvements being made | National leaders in social mobility: very interesting to watch social economic status not define graduating class | . Pathways . Chemistry, physics, applied physics, biological sciences, lots of computer science classes and pathways | Computer engineering starting soon | Smaller campus and updating curriculum | All the classes are so in sync that every change is easy to flexible | You will be trained as an experimental physicist | . Clubs . Some include: Cybersecurity, robotics, 3d printing, women in STEM, society of women engineers, society of physics students, national society of black engineers, etc. | . Internships . What is an internship? . an internship is a period of work experience offered by an organization for a limited period of time. | . How to find internship opportunities? . Join clubs which offer internships some times | Check your emails | Go to campus events | Google for internship opportunities | . Tips? . get paid and don’t settle for less | . Programs . Summer scholars program: . This 10-week summer program provides students with an intensive research experience Quantum Bridge Program: | . Research at CSUSM . researching meteorites, microplastics, etc. | there is interest to study lots of research at CSUSM | . Paying for college . Grant vs. scholarship . There are two types of loans to pay for college . Subsized loan does not accrue interest while you are in school at lease half-time or during deferment periods | Unsubsized loan does accrue interest while at school and during grace periods | . When do you have to pay back your loans? . 6 months after you graduate but you can have time to pay them back | Taking a loan, take a subsized loan becuase you don’t have to worry about the interest | . Scholarships and Grants . Apply for FAFSA | check student emails for scholarship oppurtunities | look up “undergraduate cholarship applications” | . Life after CSUSM . teaching credential program | private or public institution | Internship at the safari park | Usually go right after the teaching credential program | . Proof of learning: . Group picture after the lesson! . . Me and Joselyn’s toothbrush: . .",
            "url": "https://linaawad1.github.io/linas-fastpages/tri3/2023/03/28/csusmblog.html",
            "relUrl": "/tri3/2023/03/28/csusmblog.html",
            "date": " • Mar 28, 2023"
        }
        
    
  
    
        ,"post9": {
            "title": "Commits",
            "content": "Old fastpages until March 12 . . Finals Week: errors, college board requirements, and night at the museum blog . | First week of tri 3: 6-10th: 2.2 blog, 2.3 blog, quiz corrections . | . New fastpages until March 12 . . Second week of tri 3: 13-17th: 2.4 a and 2.4 b blog . | Third week of tri 3: 20-24th: Space and time complexity, quiz corrections, big idea commits . | .",
            "url": "https://linaawad1.github.io/linas-fastpages/2023/03/26/commits.html",
            "relUrl": "/2023/03/26/commits.html",
            "date": " • Mar 26, 2023"
        }
        
    
  
    
        ,"post10": {
            "title": "CPT blog plans",
            "content": "Individual CPT blog . So far… . So far I have created my own database in my backend flask | We attempted to connect the front and backend but we had some issues that we need to work through | I also designed the front end of my portion | My group also designed a photo slide at the beginning of the website on the home page | We also have our frontend for our sign up page done | . To do… . We are currently working on connected the backend to the frontend currently and working to deploy it. | I also want to add some more crud to my database because of the new stuff we recently learned about it in a lesson. | Furthermore, I like the image lessons we talked about and I think it would be fun to use it to design my frontend | Basically my biggest priority is running my database so at least my purpose is shown and the program works | .",
            "url": "https://linaawad1.github.io/linas-fastpages/2023/03/26/CPTblog.html",
            "relUrl": "/2023/03/26/CPTblog.html",
            "date": " • Mar 26, 2023"
        }
        
    
  
    
        ,"post11": {
            "title": "Big Idea 2 Blog",
            "content": "Final Score: 25/25 . . Reflection: . I did a lot better on this college board mc compared to all the past ones. I think all the content was fresh in my head and I had a grasp of what was going on. There were a lot of conceptual problems that I was used to with all the work we did in class. I also took this quiz more seriously and put more effort in compared to usual. . Problems I still struggled with: . I think if I was to choose the problems I struggled with I would say its the ones where I had to implement information and use it in a program instead of answering a question conceptually. .",
            "url": "https://linaawad1.github.io/linas-fastpages/final/2023/03/24/BigIdea2.html",
            "relUrl": "/final/2023/03/24/BigIdea2.html",
            "date": " • Mar 24, 2023"
        }
        
    
  
    
        ,"post12": {
            "title": "Unit 2.4b Using Programs with Data, SQL",
            "content": "Database Programming is Program with Data . Each Tri 2 Final Project should be an example of a Program with Data. . Prepare to use SQLite in common Imperative Technique . Explore SQLite Connect object to establish database connection- Explore SQLite Cursor Object to fetch data from a table within a database | . Schema of Users table in Sqlite.db . Uses PRAGMA statement to read schema. . Describe Schema, here is resource Resource- What is a database schema? . - The database schema is the blueprint or plan of the database that sets the scene. . What is the purpose of identity Column in SQL database? The purpose of the identity column in the SQL database is to act as the primary key for the table. | . | What is the purpose of a primary key in SQL database? The purpose of a primary key int eh SQL database is a unique identifier for each record in a table. The purpose of a primary key is to ensure that each record in a table can be uniquely identified and accessed. | . | What are the Data Types in SQL table? Some include String, boolean, integer, float. | . | . import sqlite3 database = &#39;instance/sqlite.db&#39; # this is location of database def schema(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Fetch results of Schema results = cursor.execute(&quot;PRAGMA table_info(&#39;users&#39;)&quot;).fetchall() # Print the results for row in results: print(row) # Close the database connection conn.close() schema() . Reading Users table in Sqlite.db . Uses SQL SELECT statement to read data . What is a connection object? After you google it, what do you think it does? An instance of a class that represents the connection to a database. I&#39;m guessing it is the main factor that facilitates the transactions and manipulations to the database. | . | Same for cursor object? A cursor object is an instance where the data can be retrieved one row at a time. | . | Look at conn object and cursor object in VSCode debugger. What attributes are in the object? The conn object has a database, host, port, user, password, etc. | . | Is &quot;results&quot; an object? How do you know? results can be a way to print the outcome of a running code cell but I think it can also be an object because in the code cell below for example it is used to retrieve data from a table. | . | . import sqlite3 def read(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Execute a SELECT statement to retrieve data from a table results = cursor.execute(&#39;SELECT * FROM users&#39;).fetchall() # Print the results if len(results) == 0: print(&quot;Table is empty&quot;) else: for row in results: print(row) # Close the cursor and connection objects cursor.close() conn.close() read() . Create a new User in table in Sqlite.db . Uses SQL INSERT to add row . - Compore create() in both SQL lessons. What is better or worse in the two implementations? . Explain purpose of SQL INSERT. Is this the same as User init? | . import sqlite3 def create(): name = input(&quot;Enter your name:&quot;) uid = input(&quot;Enter your user id:&quot;) password = input(&quot;Enter your password&quot;) dob = input(&quot;Enter your date of birth &#39;YYYY-MM-DD&#39;&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to insert data into a table cursor.execute(&quot;INSERT INTO users (_name, _uid, _password, _dob) VALUES (?, ?, ?, ?)&quot;, (name, uid, password, dob)) # Commit the changes to the database conn.commit() print(f&quot;A new user record {uid} has been created&quot;) except sqlite3.Error as error: print(&quot;Error while executing the INSERT:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #create() . Updating a User in table in Sqlite.db . Uses SQL UPDATE to modify password . What does the hacked part do? | Explain try/except, when would except occur? | What code seems to be repeated in each of these examples to point, why is it repeated? | . import sqlite3 def update(): uid = input(&quot;Enter user id to update&quot;) password = input(&quot;Enter updated password&quot;) if len(password) &lt; 2: message = &quot;hacked&quot; password = &#39;gothackednewpassword123&#39; else: message = &quot;successfully updated&quot; # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to update data in a table cursor.execute(&quot;UPDATE users SET _password = ? WHERE _uid = ?&quot;, (password, uid)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No uid {uid} was not found in the table&quot;) else: print(f&quot;The row with user id {uid} the password has been {message}&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the UPDATE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #update() . Delete a User in table in Sqlite.db . Uses a delete function to remove a user based on a user input of the id. . Is DELETE a dangerous operation? Why? | In the print statemements, what is the &quot;f&quot; and what does {uid} do? | . import sqlite3 def delete(): uid = input(&quot;Enter user id to delete&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: cursor.execute(&quot;DELETE FROM users WHERE _uid = ?&quot;, (uid,)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No uid {uid} was not found in the table&quot;) else: # The uid was found in the table and the row was deleted print(f&quot;The row with uid {uid} was successfully deleted&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the DELETE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #delete() . Menu Interface to CRUD operations . CRUD and Schema interactions from one location by running menu. Observe input at the top of VSCode, observe output underneath code cell. . Why does the menu repeat? | Could you refactor this menu? Make it work with a List? | . def menu(): operation = input(&quot;Enter: (C)reate (R)ead (U)pdate or (D)elete or (S)chema&quot;) if operation.lower() == &#39;c&#39;: create() elif operation.lower() == &#39;r&#39;: read() elif operation.lower() == &#39;u&#39;: update() elif operation.lower() == &#39;d&#39;: delete() elif operation.lower() == &#39;s&#39;: schema() elif len(operation)==0: # Escape Key return else: print(&quot;Please enter c, r, u, or d&quot;) menu() # recursion, repeat menu try: menu() # start menu except: print(&quot;Perform Jupyter &#39;Run All&#39; prior to starting menu&quot;) . Hacks . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | In this implementation, do you see procedural abstraction? | In 2.4a or 2.4b lecture Do you see data abstraction? Complement this with Debugging example. | Use Imperative or OOP style to Create a new Table or do something that applies to your CPT project. | . | . Reference... sqlite documentation .",
            "url": "https://linaawad1.github.io/linas-fastpages/2023/03/16/AP-unit2-4b.html",
            "relUrl": "/2023/03/16/AP-unit2-4b.html",
            "date": " • Mar 16, 2023"
        }
        
    
  
    
        ,"post13": {
            "title": "Unit 2.4 My Own Database blog",
            "content": "Imports and Flask Objects . &quot;&quot;&quot; These imports define the key objects &quot;&quot;&quot; from flask import Flask from flask_sqlalchemy import SQLAlchemy &quot;&quot;&quot; These object and definitions are used throughout the Jupyter Notebook. &quot;&quot;&quot; # Setup of key Flask object (app) app = Flask(__name__) # Setup SQLAlchemy object and properties for the database (db) database = &#39;sqlite:///sqlite.db&#39; # path and filename of database app.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;] = False app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = database app.config[&#39;SECRET_KEY&#39;] = &#39;SECRET_KEY&#39; db = SQLAlchemy() # This belongs in place where it runs once per project db.init_app(app) . Model Definition . &quot;&quot;&quot; database dependencies to support sqlite examples &quot;&quot;&quot; import datetime from datetime import datetime import json from sqlalchemy.exc import IntegrityError from werkzeug.security import generate_password_hash, check_password_hash &#39;&#39;&#39; Tutorial: https://www.sqlalchemy.org/library.html#tutorials, try to get into a Python shell and follow along &#39;&#39;&#39; # Define the User class to manage actions in the &#39;users&#39; table # -- Object Relational Mapping (ORM) is the key concept of SQLAlchemy # -- a.) db.Model is like an inner layer of the onion in ORM # -- b.) User represents data we want to store, something that is built on db.Model # -- c.) SQLAlchemy ORM is layer on top of SQLAlchemy Core, then SQLAlchemy engine, SQL class Flavor(db.Model): __tablename__ = &#39;flavor&#39; # table name is plural, class name is singular # Define the User schema with &quot;vars&quot; from object id = db.Column(db.Integer, primary_key=True) _name = db.Column(db.String(255), unique=True, nullable=False) _flavor = db.Column(db.String(255), unique=False, nullable=False) _size = db.Column(db.String(255), unique=False, nullable=False) _recommend = db.Column(db.String(255), unique=False, nullable=False) # constructor of a User object, initializes the instance variables within object (self) def __init__(self, name, flavor, size, recommend): self._name = name # variables with self prefix become part of the object, self._flavor = flavor self._size = size self._recommend = recommend # a name getter method, extracts name from object @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def flavor(self): return self._flavor # a setter function, allows name to be updated after initial object creation @flavor.setter def flavor(self, flavor): self._flavor = flavor # check if uid parameter matches user id in object, return boolean #def is_flavor(self, flavor): # return self._flavor == flavor @property def size(self): return self._size # a setter function, allows name to be updated after initial object creation @size.setter def size(self, size): self._size = size @property def recommend(self): return self._recommend # a setter function, allows name to be updated after initial object creation @name.setter def name(self, recommend): self._recommend = recommend # output content using str(object) in human readable form, uses getter # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.read()) # CRUD create/add a new record to the table # returns self or None on error def create(self): try: # creates a person object from User(db.Model) class, passes initializers db.session.add(self) # add prepares to persist person object to Users table db.session.commit() # SqlAlchemy &quot;unit of work pattern&quot; requires a manual commit return self except IntegrityError: db.session.remove() return None # CRUD read converts self to dictionary # returns dictionary def read(self): return { &quot;id&quot;: self.id, &quot;name&quot;: self.name, &quot;flavor&quot;: self.flavor, &quot;size&quot;: self.size, &quot;recommend&quot;: self.recommend, } # CRUD update: updates user name, password, phone # returns self def update(self, name=&quot;&quot;, flavor=&quot;&quot;, size=&quot;&quot;, recommend=&quot;&quot;): &quot;&quot;&quot;only updates values with length&quot;&quot;&quot; if len(name) &gt; 0: self.name = name if len(flavor) &gt; 0: self.flavor = flavor if len(size) &gt; 0: self.size = size if len(recommend) &gt; 0: self.recommend = recommend db.session.commit() return self # CRUD delete: remove self # None def delete(self): db.session.delete(self) db.session.commit() return None . Initial Data . &quot;&quot;&quot;Database Creation and Testing &quot;&quot;&quot; # Builds working data for testing def initFlavor(): with app.app_context(): &quot;&quot;&quot;Create database and tables&quot;&quot;&quot; db.create_all() &quot;&quot;&quot;Tester data for table&quot;&quot;&quot; i1 = Flavor(name=&#39;Sherlock&#39;, flavor=&#39;chocolate&#39;, size=&#39;small&#39;, recommend=&#39;yes&#39;) i2 = Flavor(name=&#39;Dude&#39;, flavor=&#39;vanilla&#39;, size=&#39;medium&#39;, recommend=&#39;yes&#39;) i3 = Flavor(name=&#39;Bunny&#39;, flavor=&#39;mint&#39;, size=&#39;large&#39;, recommend=&#39;yes&#39;) i4 = Flavor(name=&#39;Lion&#39;, flavor=&#39;mango&#39;, size=&#39;small&#39;, recommend=&#39;yes&#39;) i5 = Flavor(name=&#39;Penguin&#39;, flavor=&#39;rocky road&#39;, size=&#39;medium&#39;, recommend=&#39;yes&#39;) i6 = Flavor(name=&#39;Turtle&#39;, flavor=&#39;coconut&#39;, size=&#39;small&#39;, recommend=&#39;yes&#39;) flavor = [i1, i2, i3, i4, i5, i6] &quot;&quot;&quot;Builds sample user/note(s) data&quot;&quot;&quot; for flavor in flavor: try: &#39;&#39;&#39;add flavor to table&#39;&#39;&#39; object = flavor.create() print(f&quot;Created new name {object.name}&quot;) except: # error raised if object nit created &#39;&#39;&#39;fails with bad or duplicate data&#39;&#39;&#39; print(f&quot;Records exist name {flavor.flavor}, or error.&quot;) initFlavor() . Records exist name chocolate, or error. Records exist name vanilla, or error. Records exist name mint, or error. Records exist name mango, or error. Records exist name rocky road, or error. Records exist name coconut, or error. . Check for given Credentials in users table in sqlite.db . def find_by_flavor(flavor): with app.app_context(): flavor = Flavor.query.filter_by(_flavor=flavor).first() return flavor # returns user object # Check credentials by finding user and verify password def check_credentials(flavor): # query email and return user record flavor = find_by_flavor(flavor) if flavor == None: return False if (flavor.is_flavor(flavor)): return True return False #check_credentials(&quot;indi&quot;, &quot;123qwerty&quot;) . Create a new User in table in Sqlite.db . def create(): flavor = input(&quot;Enter your flavor:&quot;) #flavor = find_by_flavor(flavor) #try: # print(&quot;Found n&quot;, flavor.read()) # return #except: # pass # keep going # request value that ensure creating valid object name = input(&quot;Enter your name:&quot;) size = input(&quot;Enter your size:&quot;) recommend = input(&quot;Do you recommend this?&quot;) # password = input(&quot;Enter your password&quot;) # Initialize User object before date flavor = Flavor(name=name, flavor=flavor, size=size, recommend=recommend ) # write object to database with app.app_context(): try: object = flavor.create() print(&quot;Created n&quot;, object.name) except: # error raised if object not created print(&quot;Unknown error name {name}&quot;) #create() . Reading users table in sqlite.db . def read(): with app.app_context(): table = Flavor.query.all() json_ready = [flavor.read() for flavor in table] # &quot;List Comprehensions&quot;, for each user add user.read() to list return json_ready #read() . Update . def update(): # optimize user time to see if uid exists flavor = input(&quot;Enter the flavor you tried and want to re-review&quot;) user = find_by_flavor(flavor) if flavor is None: print(f&quot;User {flavor} is not found :(&quot;) return new_name = input(&quot;What is your name?&quot;) new_size = input(&quot;What size did you order?&quot;) new_recommend = input(&quot;Do you still recommend this product?&quot;) with app.app_context(): try: user.update(new_name, new_size, new_recommend) print(f&quot;The flavor, {flavor}, has been updated by {new_name}, with the size {new_size}, and they said: {new_recommend} they do recommend it.&quot;) except: print(f&quot;There was an problem in updating the review, {flavor}&quot;) #update() . Delete . def delete(): # optimize user time to see if uid exists flavor = input(&quot;Enter the flavor you review:&quot;) user = find_by_flavor(flavor) if user is None: print(f&quot;Flavor, {flavor} is not found :(&quot;) with app.app_context(): try: user.delete() print(f&quot;Flavor, {flavor} has been deleted.&quot;) except: print(&quot;Enter a flavor that already exists&quot;) #delete() . SQlite import . import sqlite3 database = &#39;instance/sqlite.db&#39; # this is location of database def schema(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Fetch results of Schema results = cursor.execute(&quot;PRAGMA table_info(&#39;users&#39;)&quot;).fetchall() # Print the results for row in results: print(row) # Close the database connection conn.close() schema() . import sqlite3 def read(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Execute a SELECT statement to retrieve data from a table results = cursor.execute(&#39;SELECT * FROM flavor&#39;).fetchall() # Print the results if len(results) == 0: print(&quot;Table is empty&quot;) else: for row in results: print(row) # Close the cursor and connection objects cursor.close() conn.close() #read() . Create . import sqlite3 database = &#39;instance/sqlite.db&#39; # this is location of database def schema(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Fetch results of Schema results = cursor.execute(&quot;PRAGMA table_info(&#39;users&#39;)&quot;).fetchall() # Print the results for row in results: print(row) # Close the database connection conn.close() #schema() . import sqlite3 def create(): flavor = input(&quot;Enter your flavor&quot;) #name = input(&quot;Enter your recipe name:&quot;) name = input(&quot;Enter your name:&quot;) size = input(&quot;Enter your size:&quot;) recommend = input(&quot;Do you recommend this flavor?&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to insert data into a table cursor.execute(&quot;INSERT INTO flavor (_flavor, _name, _size, _recommend) VALUES (?, ?, ?, ?)&quot;, (flavor, name, size, recommend)) # Commit the changes to the database conn.commit() print(f&quot;A new recipe record {flavor} has been created&quot;) except sqlite3.Error as error: print(&quot;Error while executing the INSERT:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #create() . # def update(): # flavor = input(&quot;Enter flavor to update&quot;) # recommend = input(&quot;Do you still recommend it?&quot;) # # if len(comments) &lt; 2: # # message = &quot;hacked&quot; # # comments = &#39;-&#39; # # else: # # message = &quot;successfully updated&quot; # # Connect to the database file # conn = sqlite3.connect(database) # # Create a cursor object to execute SQL commands # cursor = conn.cursor() # try: # # Execute an SQL command to update data in a table # cursor.execute(&quot;UPDATE flavor SET _recommend = ? WHERE _flavor = ?&quot;, (recommend, flavor)) # if cursor.rowcount == 0: # # The uid was not found in the table # print(f&quot;Flavor, {flavor} was not found in the table&quot;) # else: # print(f&quot;The row with flavor, {flavor} the comments has been {recommend}&quot;) # conn.commit() # except sqlite3.Error as error: # print(&quot;Error while executing the UPDATE:&quot;, error) # # Close the cursor and connection objects # cursor.close() # conn.close() # update() . import sqlite3 def delete(): flavor = input(&quot;Enter flavor to delete&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: cursor.execute(&quot;DELETE FROM flavor WHERE _flavor = ?&quot;, (flavor,)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No flavor {flavor} was found in the table&quot;) else: # The uid was found in the table and the row was deleted print(f&quot;The row with flavor, {flavor} was successfully deleted&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the DELETE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #delete() . import sqlite3 def update(): flavor = input(&quot;Enter flavor&quot;) recommend = input(&quot;Enter recommendation&quot;) # if len(password) &lt; 2: # message = &quot;hacked&quot; # password = &#39;gothackednewpassword123&#39; # else: # message = &quot;successfully updated&quot; # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to update data in a table cursor.execute(&quot;UPDATE flavor SET _recommend = ? WHERE _flavor = ?&quot;, (recommend, flavor)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No flavor {flavor} was not found in the table&quot;) else: print(f&quot;The row with flavor {flavor} the password has been {recommend}&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the UPDATE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #update() . CRUD menu . def menu(): operation = input(&quot;Enter: (C)reate (R)ead (U)pdate or (D)elete or (S)chema&quot;) if operation.lower() == &#39;c&#39;: create() elif operation.lower() == &#39;r&#39;: read() elif operation.lower() == &#39;u&#39;: update() elif operation.lower() == &#39;d&#39;: delete() elif operation.lower() == &#39;s&#39;: schema() elif len(operation)==0: # Escape Key return else: print(&quot;Please enter c, r, u, or d&quot;) menu() # recursion, repeat menu try: menu() # start menu except: print(&quot;Perform Jupyter &#39;Run All&#39; prior to starting menu&quot;) #tested R . (1, &#39;Sherlock&#39;, &#39;chocolate&#39;, &#39;small&#39;, &#39;yes&#39;) (2, &#39;Dude&#39;, &#39;vanilla&#39;, &#39;medium&#39;, &#39;yes&#39;) (3, &#39;Bunny&#39;, &#39;mint&#39;, &#39;large&#39;, &#39;yes&#39;) (4, &#39;Lion&#39;, &#39;mango&#39;, &#39;small&#39;, &#39;yes&#39;) (5, &#39;Penguin&#39;, &#39;rocky road&#39;, &#39;medium&#39;, &#39;yes&#39;) (6, &#39;Turtle&#39;, &#39;coconut&#39;, &#39;small&#39;, &#39;no&#39;) (8, &#39;Kirk&#39;, &#39;oreo&#39;, &#39;small&#39;, &#39;no&#39;) (9, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;) A new recipe record peanut butter and chocolate has been created No flavor peanut butter and chocolatwe was not found in the table The row with flavor peanut butter and chocolate the password has been no (1, &#39;Sherlock&#39;, &#39;chocolate&#39;, &#39;small&#39;, &#39;yes&#39;) (2, &#39;Dude&#39;, &#39;vanilla&#39;, &#39;medium&#39;, &#39;yes&#39;) (3, &#39;Bunny&#39;, &#39;mint&#39;, &#39;large&#39;, &#39;yes&#39;) (4, &#39;Lion&#39;, &#39;mango&#39;, &#39;small&#39;, &#39;yes&#39;) (5, &#39;Penguin&#39;, &#39;rocky road&#39;, &#39;medium&#39;, &#39;yes&#39;) (6, &#39;Turtle&#39;, &#39;coconut&#39;, &#39;small&#39;, &#39;no&#39;) (8, &#39;Kirk&#39;, &#39;oreo&#39;, &#39;small&#39;, &#39;no&#39;) (9, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;) (10, &#39;Mort&#39;, &#39;peanut butter and chocolate&#39;, &#39;single&#39;, &#39;no&#39;) The row with flavor, peanut butter and chocolate was successfully deleted (1, &#39;Sherlock&#39;, &#39;chocolate&#39;, &#39;small&#39;, &#39;yes&#39;) (2, &#39;Dude&#39;, &#39;vanilla&#39;, &#39;medium&#39;, &#39;yes&#39;) (3, &#39;Bunny&#39;, &#39;mint&#39;, &#39;large&#39;, &#39;yes&#39;) (4, &#39;Lion&#39;, &#39;mango&#39;, &#39;small&#39;, &#39;yes&#39;) (5, &#39;Penguin&#39;, &#39;rocky road&#39;, &#39;medium&#39;, &#39;yes&#39;) (6, &#39;Turtle&#39;, &#39;coconut&#39;, &#39;small&#39;, &#39;no&#39;) (8, &#39;Kirk&#39;, &#39;oreo&#39;, &#39;small&#39;, &#39;no&#39;) (9, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;) .",
            "url": "https://linaawad1.github.io/linas-fastpages/2023/03/15/owndatabase.html",
            "relUrl": "/2023/03/15/owndatabase.html",
            "date": " • Mar 15, 2023"
        }
        
    
  
    
        ,"post14": {
            "title": "Unit 2.4a Using Programs with Data, SQLAlchemy",
            "content": "Database and SQLAlchemy . In this blog we will explore using programs with data, focused on Databases. We will use SQLite Database to learn more about using Programs with Data. . College Board talks about ideas like . Program Usage. &quot;iterative and interactive way when processing information&quot; | Managing Data. &quot;classifying data are part of the process in using programs&quot;, &quot;data files in a Table&quot; | Insight &quot;insight and knowledge can be obtained from ... digitally represented information&quot; | Filter systems. &#39;tools for finding information and recognizing patterns&quot; | Application. &quot;the preserve has two databases&quot;, &quot;an employee wants to count the number of book&quot; | . | PBL, Databases, Iterative/OOP . Iterative. Refers to a sequence of instructions or code being repeated until a specific end result is achieved | OOP. A computer programming model that organizes software design around data, or objects, rather than functions and logic | SQL. Structured Query Language, abbreviated as SQL, is a language used in programming, managing, and structuring data | . | . Imports and Flask Objects . Defines and key object creations . Comment on where you have observed these working? | . Flask app object:- Flask app object implements a WSGI(website server gateway interface) application which means it &quot;calls forward requests&quot;. After you create it, it will be a central registry for view functions, the URL rules, template functions, etc. We have seen these working when building our databases last trimester and we get resources from other files for the jokes, users, etc.2. SQLAlchemy object: | The SQLAlchemy object facilitates the communication between the database and the python programming. The cells that hold our databases like we did today, are converted to SQLAlchemy statements. | . &quot;&quot;&quot; These imports define the key objects &quot;&quot;&quot; from flask import Flask from flask_sqlalchemy import SQLAlchemy &quot;&quot;&quot; These object and definitions are used throughout the Jupyter Notebook. &quot;&quot;&quot; # Setup of key Flask object (app) app = Flask(__name__) # Setup SQLAlchemy object and properties for the database (db) database = &#39;sqlite:///sqlite.db&#39; # path and filename of database app.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;] = False app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = database app.config[&#39;SECRET_KEY&#39;] = &#39;SECRET_KEY&#39; db = SQLAlchemy() # This belongs in place where it runs once per project db.init_app(app) . Model Definition . Define columns, initialization, and CRUD methods for users table in sqlite.db . Comment on these items in the class . class User purpose:The purpose is to provide a way to build the data and have everything work together. Within this there are the attributes like user id, name, etc.- db.Model inheritance: The User Class inherits from the db.model Then the different attributes like _name would be considered some of the columns in the user table. | init method: Usually used to initialize attributes in a database. So when there is a new attribute in the database like the user id or whatever it is, the init method is used. | @property, @.setter: In databases setters and getters are used for the different attributes. These are used in python for the setters and getters.&lt;/li&gt; additional methods: additional methods include crud methods. This stands for create, read, update, and delete. Each of these will obviously do something different but they all change or use the data base by adding, removing, reading, or updating. | . | &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &quot;&quot;&quot; database dependencies to support sqlite examples &quot;&quot;&quot; import datetime from datetime import datetime import json from sqlalchemy.exc import IntegrityError from werkzeug.security import generate_password_hash, check_password_hash &#39;&#39;&#39; Tutorial: https://www.sqlalchemy.org/library.html#tutorials, try to get into a Python shell and follow along &#39;&#39;&#39; # Define the User class to manage actions in the &#39;users&#39; table # -- Object Relational Mapping (ORM) is the key concept of SQLAlchemy # -- a.) db.Model is like an inner layer of the onion in ORM # -- b.) User represents data we want to store, something that is built on db.Model # -- c.) SQLAlchemy ORM is layer on top of SQLAlchemy Core, then SQLAlchemy engine, SQL class User(db.Model): __tablename__ = &#39;users&#39; # table name is plural, class name is singular # Define the User schema with &quot;vars&quot; from object id = db.Column(db.Integer, primary_key=True) _name = db.Column(db.String(255), unique=False, nullable=False) _uid = db.Column(db.String(255), unique=True, nullable=False) _password = db.Column(db.String(255), unique=False, nullable=False) _dob = db.Column(db.Date) # constructor of a User object, initializes the instance variables within object (self) def __init__(self, name, uid, password=&quot;123qwerty&quot;, dob=datetime.today()): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) if isinstance(dob, str): # not a date type dob = date=datetime.today() self._dob = dob # a name getter method, extracts name from object @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid @property def password(self): return self._password[0:10] + &quot;...&quot; # because of security only show 1st characters # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # dob property is returned as string, to avoid unfriendly outcomes @property def dob(self): dob_string = self._dob.strftime(&#39;%m-%d-%Y&#39;) return dob_string # dob should be have verification for type date @dob.setter def dob(self, dob): if isinstance(dob, str): # not a date type dob = date=datetime.today() self._dob = dob @property def age(self): today = datetime.today() return today.year - self._dob.year - ((today.month, today.day) &lt; (self._dob.month, self._dob.day)) # output content using str(object) in human readable form, uses getter # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.read()) # CRUD create/add a new record to the table # returns self or None on error def create(self): try: # creates a person object from User(db.Model) class, passes initializers db.session.add(self) # add prepares to persist person object to Users table db.session.commit() # SqlAlchemy &quot;unit of work pattern&quot; requires a manual commit return self except IntegrityError: db.session.remove() return None # CRUD read converts self to dictionary # returns dictionary def read(self): return { &quot;id&quot;: self.id, &quot;name&quot;: self.name, &quot;uid&quot;: self.uid, &quot;dob&quot;: self.dob, &quot;age&quot;: self.age, } # CRUD update: updates user name, password, phone # returns self def update(self, name=&quot;&quot;, uid=&quot;&quot;, password=&quot;&quot;): &quot;&quot;&quot;only updates values with length&quot;&quot;&quot; if len(name) &gt; 0: self.name = name if len(uid) &gt; 0: self.uid = uid if len(password) &gt; 0: self.set_password(password) db.session.commit() return self # CRUD delete: remove self # None def delete(self): db.session.delete(self) db.session.commit() return None . Class Notes: . go to class user | class definition is calld a template | template definition- what porpertires wewant our users to have- for property user | when we do u1 = user and send the properties, we make an object from the template definiition user | we will make objects from the template | db.model is how we inherit properties | we defined it already in a db model | we can do the column definitions | enables our template user to be used as a way to create | Now our user template can do database stuff | init method recieves parameters and initializes attributes | setters anfd getters, change attributes or retrieve these. properties and stuff | . | command methods for databsing- added crud- help us interact with the data in our object | we can have methods that help solve problems with the data | we just defined the template | . ORM- on top of python that works with database | Credentials check: query for the username and password first record that matches the user id | check true and false, user and password true, user no password false, etc. | . | . Initial Data . Uses SQLALchemy db.create_all() to initialize rows into sqlite.db . Comment on how these work? | . Create All Tables from db Object | the db Object is a template and a table will be included in this file. | . User Object Constructors | A constructor is a special method that is called when an object is created from a class. We use the constructor init. | . Try / Except | try and except blocks are used to handle exceptions and errors that may occur during the execution of your code. | . &quot;&quot;&quot;Database Creation and Testing &quot;&quot;&quot; # Builds working data for testing def initUsers(): with app.app_context(): &quot;&quot;&quot;Create database and tables&quot;&quot;&quot; db.create_all() &quot;&quot;&quot;Tester data for table&quot;&quot;&quot; u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;, dob=datetime(1847, 2, 11)) u2 = User(name=&#39;Nikola Tesla&#39;, uid=&#39;niko&#39;, password=&#39;123niko&#39;) u3 = User(name=&#39;Alexander Graham Bell&#39;, uid=&#39;lex&#39;, password=&#39;123lex&#39;) u4 = User(name=&#39;Eli Whitney&#39;, uid=&#39;whit&#39;, password=&#39;123whit&#39;) u5 = User(name=&#39;Indiana Jones&#39;, uid=&#39;indi&#39;, dob=datetime(1920, 10, 21)) u6 = User(name=&#39;Marion Ravenwood&#39;, uid=&#39;raven&#39;, dob=datetime(1921, 10, 21)) users = [u1, u2, u3, u4, u5, u6] &quot;&quot;&quot;Builds sample user/note(s) data&quot;&quot;&quot; for user in users: try: &#39;&#39;&#39;add user to table&#39;&#39;&#39; object = user.create() print(f&quot;Created new uid {object.uid}&quot;) except: # error raised if object nit created &#39;&#39;&#39;fails with bad or duplicate data&#39;&#39;&#39; print(f&quot;Records exist uid {user.uid}, or error.&quot;) initUsers() . OperationalError Traceback (most recent call last) File ~/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1964, in Connection._exec_single_context(self, dialect, context, statement, parameters) 1963 if not evt_handled: -&gt; 1964 self.dialect.do_execute( 1965 cursor, str_statement, effective_parameters, context 1966 ) 1968 if self._has_events or self.engine._has_events: File ~/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/engine/default.py:748, in DefaultDialect.do_execute(self, cursor, statement, parameters, context) 747 def do_execute(self, cursor, statement, parameters, context=None): --&gt; 748 cursor.execute(statement, parameters) OperationalError: database is locked The above exception was the direct cause of the following exception: OperationalError Traceback (most recent call last) /Users/linaalsheikh-eid/vscode/linas-fastpages/_notebooks/2023-03-13-AP-unit2-4a.ipynb Cell 9 in &lt;cell line: 30&gt;() &lt;a href=&#39;vscode-notebook-cell:/Users/linaalsheikh-eid/vscode/linas-fastpages/_notebooks/2023-03-13-AP-unit2-4a.ipynb#X11sZmlsZQ%3D%3D?line=26&#39;&gt;27&lt;/a&gt; &#39;&#39;&#39;fails with bad or duplicate data&#39;&#39;&#39; &lt;a href=&#39;vscode-notebook-cell:/Users/linaalsheikh-eid/vscode/linas-fastpages/_notebooks/2023-03-13-AP-unit2-4a.ipynb#X11sZmlsZQ%3D%3D?line=27&#39;&gt;28&lt;/a&gt; print(f&#34;Records exist uid {user.uid}, or error.&#34;) &gt; &lt;a href=&#39;vscode-notebook-cell:/Users/linaalsheikh-eid/vscode/linas-fastpages/_notebooks/2023-03-13-AP-unit2-4a.ipynb#X11sZmlsZQ%3D%3D?line=29&#39;&gt;30&lt;/a&gt; initUsers() /Users/linaalsheikh-eid/vscode/linas-fastpages/_notebooks/2023-03-13-AP-unit2-4a.ipynb Cell 9 in initUsers() &lt;a href=&#39;vscode-notebook-cell:/Users/linaalsheikh-eid/vscode/linas-fastpages/_notebooks/2023-03-13-AP-unit2-4a.ipynb#X11sZmlsZQ%3D%3D?line=5&#39;&gt;6&lt;/a&gt; with app.app_context(): &lt;a href=&#39;vscode-notebook-cell:/Users/linaalsheikh-eid/vscode/linas-fastpages/_notebooks/2023-03-13-AP-unit2-4a.ipynb#X11sZmlsZQ%3D%3D?line=6&#39;&gt;7&lt;/a&gt; &#34;&#34;&#34;Create database and tables&#34;&#34;&#34; -&gt; &lt;a href=&#39;vscode-notebook-cell:/Users/linaalsheikh-eid/vscode/linas-fastpages/_notebooks/2023-03-13-AP-unit2-4a.ipynb#X11sZmlsZQ%3D%3D?line=7&#39;&gt;8&lt;/a&gt; db.create_all() &lt;a href=&#39;vscode-notebook-cell:/Users/linaalsheikh-eid/vscode/linas-fastpages/_notebooks/2023-03-13-AP-unit2-4a.ipynb#X11sZmlsZQ%3D%3D?line=8&#39;&gt;9&lt;/a&gt; &#34;&#34;&#34;Tester data for table&#34;&#34;&#34; &lt;a href=&#39;vscode-notebook-cell:/Users/linaalsheikh-eid/vscode/linas-fastpages/_notebooks/2023-03-13-AP-unit2-4a.ipynb#X11sZmlsZQ%3D%3D?line=9&#39;&gt;10&lt;/a&gt; u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;, dob=datetime(1847, 2, 11)) File ~/opt/anaconda3/lib/python3.9/site-packages/flask_sqlalchemy/extension.py:884, in SQLAlchemy.create_all(self, bind_key) 867 def create_all(self, bind_key: str | None | list[str | None] = &#34;__all__&#34;) -&gt; None: 868 &#34;&#34;&#34;Create tables that do not exist in the database by calling 869 ``metadata.create_all()`` for all or some bind keys. This does not 870 update existing tables, use a migration library for that. (...) 882 Added the ``bind`` and ``app`` parameters. 883 &#34;&#34;&#34; --&gt; 884 self._call_for_binds(bind_key, &#34;create_all&#34;) File ~/opt/anaconda3/lib/python3.9/site-packages/flask_sqlalchemy/extension.py:865, in SQLAlchemy._call_for_binds(self, bind_key, op_name) 862 raise sa.exc.UnboundExecutionError(message) from None 864 metadata = self.metadatas[key] --&gt; 865 getattr(metadata, op_name)(bind=engine) File ~/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/sql/schema.py:5581, in MetaData.create_all(self, bind, tables, checkfirst) 5557 def create_all( 5558 self, 5559 bind: _CreateDropBind, 5560 tables: Optional[_typing_Sequence[Table]] = None, 5561 checkfirst: bool = True, 5562 ) -&gt; None: 5563 &#34;&#34;&#34;Create all tables stored in this metadata. 5564 5565 Conditional by default, will not attempt to recreate tables already (...) 5579 5580 &#34;&#34;&#34; -&gt; 5581 bind._run_ddl_visitor( 5582 ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables 5583 ) File ~/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/engine/base.py:3226, in Engine._run_ddl_visitor(self, visitorcallable, element, **kwargs) 3219 def _run_ddl_visitor( 3220 self, 3221 visitorcallable: Type[Union[SchemaGenerator, SchemaDropper]], 3222 element: SchemaItem, 3223 **kwargs: Any, 3224 ) -&gt; None: 3225 with self.begin() as conn: -&gt; 3226 conn._run_ddl_visitor(visitorcallable, element, **kwargs) File ~/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/engine/base.py:2430, in Connection._run_ddl_visitor(self, visitorcallable, element, **kwargs) 2418 def _run_ddl_visitor( 2419 self, 2420 visitorcallable: Type[Union[SchemaGenerator, SchemaDropper]], 2421 element: SchemaItem, 2422 **kwargs: Any, 2423 ) -&gt; None: 2424 &#34;&#34;&#34;run a DDL visitor. 2425 2426 This method is only here so that the MockConnection can change the 2427 options given to the visitor so that &#34;checkfirst&#34; is skipped. 2428 2429 &#34;&#34;&#34; -&gt; 2430 visitorcallable(self.dialect, self, **kwargs).traverse_single(element) File ~/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/sql/visitors.py:670, in ExternalTraversal.traverse_single(self, obj, **kw) 668 meth = getattr(v, &#34;visit_%s&#34; % obj.__visit_name__, None) 669 if meth: --&gt; 670 return meth(obj, **kw) File ~/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/sql/ddl.py:924, in SchemaGenerator.visit_metadata(self, metadata) 922 for table, fkcs in collection: 923 if table is not None: --&gt; 924 self.traverse_single( 925 table, 926 create_ok=True, 927 include_foreign_key_constraints=fkcs, 928 _is_metadata_operation=True, 929 ) 930 else: 931 for fkc in fkcs: File ~/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/sql/visitors.py:670, in ExternalTraversal.traverse_single(self, obj, **kw) 668 meth = getattr(v, &#34;visit_%s&#34; % obj.__visit_name__, None) 669 if meth: --&gt; 670 return meth(obj, **kw) File ~/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/sql/ddl.py:958, in SchemaGenerator.visit_table(self, table, create_ok, include_foreign_key_constraints, _is_metadata_operation) 954 if not self.dialect.supports_alter: 955 # e.g., don&#39;t omit any foreign key constraints 956 include_foreign_key_constraints = None --&gt; 958 CreateTable( 959 table, 960 include_foreign_key_constraints=( 961 include_foreign_key_constraints 962 ), 963 )._invoke_with(self.connection) 965 if hasattr(table, &#34;indexes&#34;): 966 for index in table.indexes: File ~/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/sql/ddl.py:315, in ExecutableDDLElement._invoke_with(self, bind) 313 def _invoke_with(self, bind): 314 if self._should_execute(self.target, bind): --&gt; 315 return bind.execute(self) File ~/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1414, in Connection.execute(self, statement, parameters, execution_options) 1412 raise exc.ObjectNotExecutableError(statement) from err 1413 else: -&gt; 1414 return meth( 1415 self, 1416 distilled_parameters, 1417 execution_options or NO_OPTIONS, 1418 ) File ~/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/sql/ddl.py:181, in ExecutableDDLElement._execute_on_connection(self, connection, distilled_params, execution_options) 178 def _execute_on_connection( 179 self, connection, distilled_params, execution_options 180 ): --&gt; 181 return connection._execute_ddl( 182 self, distilled_params, execution_options 183 ) File ~/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1526, in Connection._execute_ddl(self, ddl, distilled_parameters, execution_options) 1521 dialect = self.dialect 1523 compiled = ddl.compile( 1524 dialect=dialect, schema_translate_map=schema_translate_map 1525 ) -&gt; 1526 ret = self._execute_context( 1527 dialect, 1528 dialect.execution_ctx_cls._init_ddl, 1529 compiled, 1530 None, 1531 execution_options, 1532 compiled, 1533 ) 1534 if self._has_events or self.engine._has_events: 1535 self.dispatch.after_execute( 1536 self, 1537 ddl, (...) 1541 ret, 1542 ) File ~/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1842, in Connection._execute_context(self, dialect, constructor, statement, parameters, execution_options, *args, **kw) 1837 return self._exec_insertmany_context( 1838 dialect, 1839 context, 1840 ) 1841 else: -&gt; 1842 return self._exec_single_context( 1843 dialect, context, statement, parameters 1844 ) File ~/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1983, in Connection._exec_single_context(self, dialect, context, statement, parameters) 1980 result = context._setup_result_proxy() 1982 except BaseException as e: -&gt; 1983 self._handle_dbapi_exception( 1984 e, str_statement, effective_parameters, cursor, context 1985 ) 1987 return result File ~/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/engine/base.py:2326, in Connection._handle_dbapi_exception(self, e, statement, parameters, cursor, context, is_sub_exec) 2324 elif should_wrap: 2325 assert sqlalchemy_exception is not None -&gt; 2326 raise sqlalchemy_exception.with_traceback(exc_info[2]) from e 2327 else: 2328 assert exc_info[1] is not None File ~/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1964, in Connection._exec_single_context(self, dialect, context, statement, parameters) 1962 break 1963 if not evt_handled: -&gt; 1964 self.dialect.do_execute( 1965 cursor, str_statement, effective_parameters, context 1966 ) 1968 if self._has_events or self.engine._has_events: 1969 self.dispatch.after_cursor_execute( 1970 self, 1971 cursor, (...) 1975 context.executemany, 1976 ) File ~/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/engine/default.py:748, in DefaultDialect.do_execute(self, cursor, statement, parameters, context) 747 def do_execute(self, cursor, statement, parameters, context=None): --&gt; 748 cursor.execute(statement, parameters) OperationalError: (sqlite3.OperationalError) database is locked [SQL: CREATE TABLE users ( id INTEGER NOT NULL, _name VARCHAR(255) NOT NULL, _uid VARCHAR(255) NOT NULL, _password VARCHAR(255) NOT NULL, _dob DATE, PRIMARY KEY (id), UNIQUE (_uid) ) ] (Background on this error at: https://sqlalche.me/e/20/e3q8) . Check for given Credentials in users table in sqlite.db . Use of ORM Query object and custom methods to identify user to credentials uid and password . Comment on purpose of following | . User.query.filter_by | The purpose is to filter the users and when you check for the given credentials the user ids must be sorted through or filtered to make sure the uid is correct and specify the conditions. | . user.password | The passwords in the table and data base are hashed. This creates higher levels of security. | . def find_by_uid(uid): with app.app_context(): user = User.query.filter_by(_uid=uid).first() return user # returns user object # Check credentials by finding user and verify password def check_credentials(uid, password): # query email and return user record user = find_by_uid(uid) if user == None: return False if (user.is_password(password)): return True return False #check_credentials(&quot;indi&quot;, &quot;123qwerty&quot;) . Create a new User in table in Sqlite.db . Uses SQLALchemy and custom user.create() method to add row. . Comment on purpose of following | . user.find_by_uid() and try/except | This has the purpose of finding a specific user id. Since the uid has to be unique, they are finding the user by the uid to determine them. It retrieves data. | . user = User(...) | This has the purpose that creates an instance of the User model in a Flask application. | . user.dob and try/except | This stores the date of birth of a user in a software application or program. The date of birth is a common piece of personal information used for identity verification and age verification purposes. | . user.create() and try/except | It creates a new user with the attributes that you set for this new user. In terms of our database, a new row is added to the table. | . def create(): # optimize user time to see if uid exists uid = input(&quot;Enter your user id:&quot;) user = find_by_uid(uid) try: print(&quot;Found n&quot;, user.read()) return except: pass # keep going # request value that ensure creating valid object name = input(&quot;Enter your name:&quot;) password = input(&quot;Enter your password&quot;) # Initialize User object before date user = User(name=name, uid=uid, password=password ) # create user.dob, fail with today as dob dob = input(&quot;Enter your date of birth &#39;YYYY-MM-DD&#39;&quot;) try: user.dob = datetime.strptime(dob, &#39;%Y-%m-%d&#39;).date() except ValueError: user.dob = datetime.today() print(f&quot;Invalid date {dob} require YYYY-mm-dd, date defaulted to {user.dbo}&quot;) # write object to database with app.app_context(): try: object = user.create() print(&quot;Created n&quot;, object.read()) except: # error raised if object not created print(&quot;Unknown error uid {uid}&quot;) create() . OperationalError Traceback (most recent call last) File ~/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1964, in Connection._exec_single_context(self, dialect, context, statement, parameters) 1963 if not evt_handled: -&gt; 1964 self.dialect.do_execute( 1965 cursor, str_statement, effective_parameters, context 1966 ) 1968 if self._has_events or self.engine._has_events: File ~/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/engine/default.py:748, in DefaultDialect.do_execute(self, cursor, statement, parameters, context) 747 def do_execute(self, cursor, statement, parameters, context=None): --&gt; 748 cursor.execute(statement, parameters) OperationalError: no such table: users The above exception was the direct cause of the following exception: OperationalError Traceback (most recent call last) /Users/linaalsheikh-eid/vscode/linas-fastpages/_notebooks/2023-03-13-AP-unit2-4a.ipynb Cell 13 in &lt;cell line: 38&gt;() &lt;a href=&#39;vscode-notebook-cell:/Users/linaalsheikh-eid/vscode/linas-fastpages/_notebooks/2023-03-13-AP-unit2-4a.ipynb#X15sZmlsZQ%3D%3D?line=34&#39;&gt;35&lt;/a&gt; except: # error raised if object not created &lt;a href=&#39;vscode-notebook-cell:/Users/linaalsheikh-eid/vscode/linas-fastpages/_notebooks/2023-03-13-AP-unit2-4a.ipynb#X15sZmlsZQ%3D%3D?line=35&#39;&gt;36&lt;/a&gt; print(&#34;Unknown error uid {uid}&#34;) &gt; &lt;a href=&#39;vscode-notebook-cell:/Users/linaalsheikh-eid/vscode/linas-fastpages/_notebooks/2023-03-13-AP-unit2-4a.ipynb#X15sZmlsZQ%3D%3D?line=37&#39;&gt;38&lt;/a&gt; create() /Users/linaalsheikh-eid/vscode/linas-fastpages/_notebooks/2023-03-13-AP-unit2-4a.ipynb Cell 13 in create() &lt;a href=&#39;vscode-notebook-cell:/Users/linaalsheikh-eid/vscode/linas-fastpages/_notebooks/2023-03-13-AP-unit2-4a.ipynb#X15sZmlsZQ%3D%3D?line=1&#39;&gt;2&lt;/a&gt; def create(): &lt;a href=&#39;vscode-notebook-cell:/Users/linaalsheikh-eid/vscode/linas-fastpages/_notebooks/2023-03-13-AP-unit2-4a.ipynb#X15sZmlsZQ%3D%3D?line=2&#39;&gt;3&lt;/a&gt; # optimize user time to see if uid exists &lt;a href=&#39;vscode-notebook-cell:/Users/linaalsheikh-eid/vscode/linas-fastpages/_notebooks/2023-03-13-AP-unit2-4a.ipynb#X15sZmlsZQ%3D%3D?line=3&#39;&gt;4&lt;/a&gt; uid = input(&#34;Enter your user id:&#34;) -&gt; &lt;a href=&#39;vscode-notebook-cell:/Users/linaalsheikh-eid/vscode/linas-fastpages/_notebooks/2023-03-13-AP-unit2-4a.ipynb#X15sZmlsZQ%3D%3D?line=4&#39;&gt;5&lt;/a&gt; user = find_by_uid(uid) &lt;a href=&#39;vscode-notebook-cell:/Users/linaalsheikh-eid/vscode/linas-fastpages/_notebooks/2023-03-13-AP-unit2-4a.ipynb#X15sZmlsZQ%3D%3D?line=5&#39;&gt;6&lt;/a&gt; try: &lt;a href=&#39;vscode-notebook-cell:/Users/linaalsheikh-eid/vscode/linas-fastpages/_notebooks/2023-03-13-AP-unit2-4a.ipynb#X15sZmlsZQ%3D%3D?line=6&#39;&gt;7&lt;/a&gt; print(&#34;Found n&#34;, user.read()) /Users/linaalsheikh-eid/vscode/linas-fastpages/_notebooks/2023-03-13-AP-unit2-4a.ipynb Cell 13 in find_by_uid(uid) &lt;a href=&#39;vscode-notebook-cell:/Users/linaalsheikh-eid/vscode/linas-fastpages/_notebooks/2023-03-13-AP-unit2-4a.ipynb#X15sZmlsZQ%3D%3D?line=1&#39;&gt;2&lt;/a&gt; def find_by_uid(uid): &lt;a href=&#39;vscode-notebook-cell:/Users/linaalsheikh-eid/vscode/linas-fastpages/_notebooks/2023-03-13-AP-unit2-4a.ipynb#X15sZmlsZQ%3D%3D?line=2&#39;&gt;3&lt;/a&gt; with app.app_context(): -&gt; &lt;a href=&#39;vscode-notebook-cell:/Users/linaalsheikh-eid/vscode/linas-fastpages/_notebooks/2023-03-13-AP-unit2-4a.ipynb#X15sZmlsZQ%3D%3D?line=3&#39;&gt;4&lt;/a&gt; user = User.query.filter_by(_uid=uid).first() &lt;a href=&#39;vscode-notebook-cell:/Users/linaalsheikh-eid/vscode/linas-fastpages/_notebooks/2023-03-13-AP-unit2-4a.ipynb#X15sZmlsZQ%3D%3D?line=4&#39;&gt;5&lt;/a&gt; return user File ~/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/orm/query.py:2752, in Query.first(self) 2750 return self._iter().first() # type: ignore 2751 else: -&gt; 2752 return self.limit(1)._iter().first() File ~/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/orm/query.py:2855, in Query._iter(self) 2852 params = self._params 2854 statement = self._statement_20() -&gt; 2855 result: Union[ScalarResult[_T], Result[_T]] = self.session.execute( 2856 statement, 2857 params, 2858 execution_options={&#34;_sa_orm_load_options&#34;: self.load_options}, 2859 ) 2861 # legacy: automatically set scalars, unique 2862 if result._attributes.get(&#34;is_single_entity&#34;, False): File ~/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/orm/session.py:2229, in Session.execute(self, statement, params, execution_options, bind_arguments, _parent_execute_state, _add_event) 2168 def execute( 2169 self, 2170 statement: Executable, (...) 2176 _add_event: Optional[Any] = None, 2177 ) -&gt; Result[Any]: 2178 r&#34;&#34;&#34;Execute a SQL expression construct. 2179 2180 Returns a :class:`_engine.Result` object representing (...) 2227 2228 &#34;&#34;&#34; -&gt; 2229 return self._execute_internal( 2230 statement, 2231 params, 2232 execution_options=execution_options, 2233 bind_arguments=bind_arguments, 2234 _parent_execute_state=_parent_execute_state, 2235 _add_event=_add_event, 2236 ) File ~/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/orm/session.py:2124, in Session._execute_internal(self, statement, params, execution_options, bind_arguments, _parent_execute_state, _add_event, _scalar_result) 2119 return conn.scalar( 2120 statement, params or {}, execution_options=execution_options 2121 ) 2123 if compile_state_cls: -&gt; 2124 result: Result[Any] = compile_state_cls.orm_execute_statement( 2125 self, 2126 statement, 2127 params or {}, 2128 execution_options, 2129 bind_arguments, 2130 conn, 2131 ) 2132 else: 2133 result = conn.execute( 2134 statement, params or {}, execution_options=execution_options 2135 ) File ~/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/orm/context.py:253, in AbstractORMCompileState.orm_execute_statement(cls, session, statement, params, execution_options, bind_arguments, conn) 243 @classmethod 244 def orm_execute_statement( 245 cls, (...) 251 conn, 252 ) -&gt; Result: --&gt; 253 result = conn.execute( 254 statement, params or {}, execution_options=execution_options 255 ) 256 return cls.orm_setup_cursor_result( 257 session, 258 statement, (...) 262 result, 263 ) File ~/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1414, in Connection.execute(self, statement, parameters, execution_options) 1412 raise exc.ObjectNotExecutableError(statement) from err 1413 else: -&gt; 1414 return meth( 1415 self, 1416 distilled_parameters, 1417 execution_options or NO_OPTIONS, 1418 ) File ~/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:486, in ClauseElement._execute_on_connection(self, connection, distilled_params, execution_options) 484 if TYPE_CHECKING: 485 assert isinstance(self, Executable) --&gt; 486 return connection._execute_clauseelement( 487 self, distilled_params, execution_options 488 ) 489 else: 490 raise exc.ObjectNotExecutableError(self) File ~/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1638, in Connection._execute_clauseelement(self, elem, distilled_parameters, execution_options) 1626 compiled_cache: Optional[CompiledCacheType] = execution_options.get( 1627 &#34;compiled_cache&#34;, self.engine._compiled_cache 1628 ) 1630 compiled_sql, extracted_params, cache_hit = elem._compile_w_cache( 1631 dialect=dialect, 1632 compiled_cache=compiled_cache, (...) 1636 linting=self.dialect.compiler_linting | compiler.WARN_LINTING, 1637 ) -&gt; 1638 ret = self._execute_context( 1639 dialect, 1640 dialect.execution_ctx_cls._init_compiled, 1641 compiled_sql, 1642 distilled_parameters, 1643 execution_options, 1644 compiled_sql, 1645 distilled_parameters, 1646 elem, 1647 extracted_params, 1648 cache_hit=cache_hit, 1649 ) 1650 if has_events: 1651 self.dispatch.after_execute( 1652 self, 1653 elem, (...) 1657 ret, 1658 ) File ~/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1842, in Connection._execute_context(self, dialect, constructor, statement, parameters, execution_options, *args, **kw) 1837 return self._exec_insertmany_context( 1838 dialect, 1839 context, 1840 ) 1841 else: -&gt; 1842 return self._exec_single_context( 1843 dialect, context, statement, parameters 1844 ) File ~/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1983, in Connection._exec_single_context(self, dialect, context, statement, parameters) 1980 result = context._setup_result_proxy() 1982 except BaseException as e: -&gt; 1983 self._handle_dbapi_exception( 1984 e, str_statement, effective_parameters, cursor, context 1985 ) 1987 return result File ~/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/engine/base.py:2326, in Connection._handle_dbapi_exception(self, e, statement, parameters, cursor, context, is_sub_exec) 2324 elif should_wrap: 2325 assert sqlalchemy_exception is not None -&gt; 2326 raise sqlalchemy_exception.with_traceback(exc_info[2]) from e 2327 else: 2328 assert exc_info[1] is not None File ~/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1964, in Connection._exec_single_context(self, dialect, context, statement, parameters) 1962 break 1963 if not evt_handled: -&gt; 1964 self.dialect.do_execute( 1965 cursor, str_statement, effective_parameters, context 1966 ) 1968 if self._has_events or self.engine._has_events: 1969 self.dispatch.after_cursor_execute( 1970 self, 1971 cursor, (...) 1975 context.executemany, 1976 ) File ~/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/engine/default.py:748, in DefaultDialect.do_execute(self, cursor, statement, parameters, context) 747 def do_execute(self, cursor, statement, parameters, context=None): --&gt; 748 cursor.execute(statement, parameters) OperationalError: (sqlite3.OperationalError) no such table: users [SQL: SELECT users.id AS users_id, users._name AS users__name, users._uid AS users__uid, users._password AS users__password, users._dob AS users__dob FROM users WHERE users._uid = ? LIMIT ? OFFSET ?] [parameters: (&#39;lina1&#39;, 1, 0)] (Background on this error at: https://sqlalche.me/e/20/e3q8) . Reading users table in sqlite.db . Uses SQLALchemy query.all method to read data . Comment on purpose of following | . User.query.all | json_ready assignment | # SQLAlchemy extracts all users from database, turns each user into JSON def read(): with app.app_context(): table = User.query.all() json_ready = [user.read() for user in table] # each user adds user.read() to list return json_ready read() . OperationalError Traceback (most recent call last) File ~/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1964, in Connection._exec_single_context(self, dialect, context, statement, parameters) 1963 if not evt_handled: -&gt; 1964 self.dialect.do_execute( 1965 cursor, str_statement, effective_parameters, context 1966 ) 1968 if self._has_events or self.engine._has_events: File ~/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/engine/default.py:748, in DefaultDialect.do_execute(self, cursor, statement, parameters, context) 747 def do_execute(self, cursor, statement, parameters, context=None): --&gt; 748 cursor.execute(statement, parameters) OperationalError: no such table: users The above exception was the direct cause of the following exception: OperationalError Traceback (most recent call last) /Users/linaalsheikh-eid/vscode/linas-fastpages/_notebooks/2023-03-13-AP-unit2-4a.ipynb Cell 15 in &lt;cell line: 8&gt;() &lt;a href=&#39;vscode-notebook-cell:/Users/linaalsheikh-eid/vscode/linas-fastpages/_notebooks/2023-03-13-AP-unit2-4a.ipynb#X20sZmlsZQ%3D%3D?line=4&#39;&gt;5&lt;/a&gt; json_ready = [user.read() for user in table] # each user adds user.read() to list &lt;a href=&#39;vscode-notebook-cell:/Users/linaalsheikh-eid/vscode/linas-fastpages/_notebooks/2023-03-13-AP-unit2-4a.ipynb#X20sZmlsZQ%3D%3D?line=5&#39;&gt;6&lt;/a&gt; return json_ready -&gt; &lt;a href=&#39;vscode-notebook-cell:/Users/linaalsheikh-eid/vscode/linas-fastpages/_notebooks/2023-03-13-AP-unit2-4a.ipynb#X20sZmlsZQ%3D%3D?line=7&#39;&gt;8&lt;/a&gt; read() /Users/linaalsheikh-eid/vscode/linas-fastpages/_notebooks/2023-03-13-AP-unit2-4a.ipynb Cell 15 in read() &lt;a href=&#39;vscode-notebook-cell:/Users/linaalsheikh-eid/vscode/linas-fastpages/_notebooks/2023-03-13-AP-unit2-4a.ipynb#X20sZmlsZQ%3D%3D?line=1&#39;&gt;2&lt;/a&gt; def read(): &lt;a href=&#39;vscode-notebook-cell:/Users/linaalsheikh-eid/vscode/linas-fastpages/_notebooks/2023-03-13-AP-unit2-4a.ipynb#X20sZmlsZQ%3D%3D?line=2&#39;&gt;3&lt;/a&gt; with app.app_context(): -&gt; &lt;a href=&#39;vscode-notebook-cell:/Users/linaalsheikh-eid/vscode/linas-fastpages/_notebooks/2023-03-13-AP-unit2-4a.ipynb#X20sZmlsZQ%3D%3D?line=3&#39;&gt;4&lt;/a&gt; table = User.query.all() &lt;a href=&#39;vscode-notebook-cell:/Users/linaalsheikh-eid/vscode/linas-fastpages/_notebooks/2023-03-13-AP-unit2-4a.ipynb#X20sZmlsZQ%3D%3D?line=4&#39;&gt;5&lt;/a&gt; json_ready = [user.read() for user in table] # each user adds user.read() to list &lt;a href=&#39;vscode-notebook-cell:/Users/linaalsheikh-eid/vscode/linas-fastpages/_notebooks/2023-03-13-AP-unit2-4a.ipynb#X20sZmlsZQ%3D%3D?line=5&#39;&gt;6&lt;/a&gt; return json_ready File ~/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/orm/query.py:2697, in Query.all(self) 2675 def all(self) -&gt; List[_T]: 2676 &#34;&#34;&#34;Return the results represented by this :class:`_query.Query` 2677 as a list. 2678 (...) 2695 :meth:`_engine.Result.scalars` - v2 comparable method. 2696 &#34;&#34;&#34; -&gt; 2697 return self._iter().all() File ~/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/orm/query.py:2855, in Query._iter(self) 2852 params = self._params 2854 statement = self._statement_20() -&gt; 2855 result: Union[ScalarResult[_T], Result[_T]] = self.session.execute( 2856 statement, 2857 params, 2858 execution_options={&#34;_sa_orm_load_options&#34;: self.load_options}, 2859 ) 2861 # legacy: automatically set scalars, unique 2862 if result._attributes.get(&#34;is_single_entity&#34;, False): File ~/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/orm/session.py:2229, in Session.execute(self, statement, params, execution_options, bind_arguments, _parent_execute_state, _add_event) 2168 def execute( 2169 self, 2170 statement: Executable, (...) 2176 _add_event: Optional[Any] = None, 2177 ) -&gt; Result[Any]: 2178 r&#34;&#34;&#34;Execute a SQL expression construct. 2179 2180 Returns a :class:`_engine.Result` object representing (...) 2227 2228 &#34;&#34;&#34; -&gt; 2229 return self._execute_internal( 2230 statement, 2231 params, 2232 execution_options=execution_options, 2233 bind_arguments=bind_arguments, 2234 _parent_execute_state=_parent_execute_state, 2235 _add_event=_add_event, 2236 ) File ~/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/orm/session.py:2124, in Session._execute_internal(self, statement, params, execution_options, bind_arguments, _parent_execute_state, _add_event, _scalar_result) 2119 return conn.scalar( 2120 statement, params or {}, execution_options=execution_options 2121 ) 2123 if compile_state_cls: -&gt; 2124 result: Result[Any] = compile_state_cls.orm_execute_statement( 2125 self, 2126 statement, 2127 params or {}, 2128 execution_options, 2129 bind_arguments, 2130 conn, 2131 ) 2132 else: 2133 result = conn.execute( 2134 statement, params or {}, execution_options=execution_options 2135 ) File ~/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/orm/context.py:253, in AbstractORMCompileState.orm_execute_statement(cls, session, statement, params, execution_options, bind_arguments, conn) 243 @classmethod 244 def orm_execute_statement( 245 cls, (...) 251 conn, 252 ) -&gt; Result: --&gt; 253 result = conn.execute( 254 statement, params or {}, execution_options=execution_options 255 ) 256 return cls.orm_setup_cursor_result( 257 session, 258 statement, (...) 262 result, 263 ) File ~/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1414, in Connection.execute(self, statement, parameters, execution_options) 1412 raise exc.ObjectNotExecutableError(statement) from err 1413 else: -&gt; 1414 return meth( 1415 self, 1416 distilled_parameters, 1417 execution_options or NO_OPTIONS, 1418 ) File ~/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:486, in ClauseElement._execute_on_connection(self, connection, distilled_params, execution_options) 484 if TYPE_CHECKING: 485 assert isinstance(self, Executable) --&gt; 486 return connection._execute_clauseelement( 487 self, distilled_params, execution_options 488 ) 489 else: 490 raise exc.ObjectNotExecutableError(self) File ~/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1638, in Connection._execute_clauseelement(self, elem, distilled_parameters, execution_options) 1626 compiled_cache: Optional[CompiledCacheType] = execution_options.get( 1627 &#34;compiled_cache&#34;, self.engine._compiled_cache 1628 ) 1630 compiled_sql, extracted_params, cache_hit = elem._compile_w_cache( 1631 dialect=dialect, 1632 compiled_cache=compiled_cache, (...) 1636 linting=self.dialect.compiler_linting | compiler.WARN_LINTING, 1637 ) -&gt; 1638 ret = self._execute_context( 1639 dialect, 1640 dialect.execution_ctx_cls._init_compiled, 1641 compiled_sql, 1642 distilled_parameters, 1643 execution_options, 1644 compiled_sql, 1645 distilled_parameters, 1646 elem, 1647 extracted_params, 1648 cache_hit=cache_hit, 1649 ) 1650 if has_events: 1651 self.dispatch.after_execute( 1652 self, 1653 elem, (...) 1657 ret, 1658 ) File ~/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1842, in Connection._execute_context(self, dialect, constructor, statement, parameters, execution_options, *args, **kw) 1837 return self._exec_insertmany_context( 1838 dialect, 1839 context, 1840 ) 1841 else: -&gt; 1842 return self._exec_single_context( 1843 dialect, context, statement, parameters 1844 ) File ~/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1983, in Connection._exec_single_context(self, dialect, context, statement, parameters) 1980 result = context._setup_result_proxy() 1982 except BaseException as e: -&gt; 1983 self._handle_dbapi_exception( 1984 e, str_statement, effective_parameters, cursor, context 1985 ) 1987 return result File ~/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/engine/base.py:2326, in Connection._handle_dbapi_exception(self, e, statement, parameters, cursor, context, is_sub_exec) 2324 elif should_wrap: 2325 assert sqlalchemy_exception is not None -&gt; 2326 raise sqlalchemy_exception.with_traceback(exc_info[2]) from e 2327 else: 2328 assert exc_info[1] is not None File ~/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1964, in Connection._exec_single_context(self, dialect, context, statement, parameters) 1962 break 1963 if not evt_handled: -&gt; 1964 self.dialect.do_execute( 1965 cursor, str_statement, effective_parameters, context 1966 ) 1968 if self._has_events or self.engine._has_events: 1969 self.dispatch.after_cursor_execute( 1970 self, 1971 cursor, (...) 1975 context.executemany, 1976 ) File ~/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/engine/default.py:748, in DefaultDialect.do_execute(self, cursor, statement, parameters, context) 747 def do_execute(self, cursor, statement, parameters, context=None): --&gt; 748 cursor.execute(statement, parameters) OperationalError: (sqlite3.OperationalError) no such table: users [SQL: SELECT users.id AS users_id, users._name AS users__name, users._uid AS users__uid, users._password AS users__password, users._dob AS users__dob FROM users] (Background on this error at: https://sqlalche.me/e/20/e3q8) . Hacks . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | Add Update functionality to this blog. | Add Delete functionality to this blog. | . &lt;/div&gt; | .",
            "url": "https://linaawad1.github.io/linas-fastpages/2023/03/13/AP-unit2-4a.html",
            "relUrl": "/2023/03/13/AP-unit2-4a.html",
            "date": " • Mar 13, 2023"
        }
        
    
  
    
        ,"post15": {
            "title": "Final Quiz Blog",
            "content": "Question Review . Final Score = 39/50 . Question 14 . . My Answer: A | . Why did I choose this? . I chose A because I thought that freeware and shareware were not good things and for some reason I thought they would be risks for the user. | . Why was it wrong? . The answer I chose didn’t accurately represent the question. Freeware or shareware is generally intended for download onto a home computer and this use is considered ethical. . | Right Answer: C . | . Why? . Single-user copies of software are meant for one individual to use. Computer labs are meant for public use, so installing the software on the computers raises ethical concerns. | . Question 22 . . My Answer: D | . Why did I choose this? . I don’t really know why I chose this one I honestly can’t see a reason I picked D | . Why was it wrong? . The answer was A because it actually was grid I and only not gird II . | Right Answer: A . | . Why? . In Grid I, the robot moves forward to the end of the bottom row, turns right twice, moves forward twice, turns right twice, moves forward until the end of the middle row, turns left twice, moves forward twice, turns left twice, and moves forward until Goal_Reached is true. | . Question 29 . . My Answer: C | . Why did I choose this? . I Chose this option because I though that a and c were true because a had to be c which is true and now c is true and true again. | . Why was it wrong? . The fourth statement assigns the value false to a. The fifth statement assigns the value false to c. . | Right Answer: B . | . Why? . The first three statements assign values to the variables. The fourth statement assigns the value of (NOT (a OR b)) AND c to a. Since a OR b is true, NOT (a OR b) is false, so (NOT (a OR b)) AND c is false. The fifth statement assigns the value of c AND a to c. Since a is now false, c AND a is false. The last three statements display the values of the variables. | . Question 31 . . My Answer: B Why did I choose this? . | I think I chose the wrong answer and was rushing when I originally took it because it makes more sense to me how it would be that the conditions is that it isn’t so you turn on the motor. | . Why was it wrong? . This algorithm will turn on the motor in some cases when the gate is already open. . | Right Answer: D Why? . | The algorithm continues past the first check if the time is during business hours, the algorithm continues past the second check if the gate sensor is activated, and the algorithm continues past the third check if the gate is not open. Performing the checks in this order will ensure that the gate is opened only under the appropriate conditions. | . Question 33 . . My Answer: D | . Why did I choose this? . I chose this because I was honestly really confused and in my head it wouldn’t click so I just gave it my best effort but I was never really confident in my answer. | . Why was it wrong? . This code segment leaves the robot four rows above its starting position and two rows above the gray square. . | Right Answer: B . | . Why? . The loop that repeats four times returns the robot to its starting position. The three lines of code that follow the loop move the robot one row up and leave it facing right. When this has been repeated twice, the robot is in the gray square. | . Question 34 . . My Answer: C | . Why did I choose this? . I chose C because I messed up with the one section where it says rotate right instead of rotate left. | . Why was it wrong? . The robot needs to rotate right instead of left after the block of 2 moves forward. . | Right Answer: D . | . Why? . The robot moves forward three spaces, turns to the left, moves forward two spaces, turns to the right, and moves forward three spaces. | . Question 36 . . My Answer: A | . Why did I choose this? . I chose A because I thought that the score had to be greater than or equal to 90 and I don’t think that I completely understood this code segment very well. | . Why was it wrong? . Code segment III works correctly. Code segment III assigns “C” when the numeric score is less than 80, or “B” if the numeric score is not less than 80 but is less than or equal to 90, or “A” otherwise. . | Right Answer: D . | . Why? . Code segment I does not work correctly because it is not possible for “C” to be the value of grade at the end of the code segment. Code segment II correctly assigns “A” when the numeric score is greater than 90, or “B” if the numeric score is not greater than 90 but is greater than or equal to 80, or “C” otherwise. Code segment III assigns “C” when the numeric score is less than 80, or “B” if the numeric score is not less than 80 but is less than or equal to 90, or “A” otherwise. | . Question 40 . . My Answer: B | . Why did I choose this? . I chose this answer because I thought it would make sense to replace the the rotate right command to a left command. | . Why was it wrong? . After moving forward two squares, if the robot were to turn left, then the next move forward would put the robot beyond the edge of the grid. . | Right Answer: D . | . Why? . In order for the robot to move from the gray square back to its original position, it must move forward two squares, turn right, move forward four squares, turn left, and move forward two squares. The same set of moves can be used in both directions, so no change is needed to the algorithm. | . Question 41 . . My Answer: A | . Why did I choose this? . I chose A because I thought that the values needed to be stored as binary or decimal numbers in order to fulfill what is needed but in reality thats not the case. | . Why was it wrong? . The values can be stored in any numerical base as long as they are sorted. . | Right Answer: B . | . Why? . In order for a binary search on a list to work as intended, the list must be sorted. | . Question 45 . . My Answer: A and C | . Why did I choose this? . I chose A instead of D because I thought protection was a part of the possible answer, Also, I didn’t choose D because I thought choice A suited it better but it didn’t | . Why was it wrong? . For answer A being wrong: procedural abstraction does not prevent programmers from reusing code written by other programmers. D was also the other answer choice. . | Right Answer: C and D . | . Why? . Procedural abstraction helps improve code readability. Also,pProcedures created to solve subproblems of a larger problem are called by name. | . Question 50 . . My Answer: B and D | . Why did I choose this? . I chose B(the wrong answer) because I saw an exponential pattern by 2. I saw this pattern and tought it would make sense but this was not the linear pattern we were looking for. | . Why was it wrong? . Algorithm B is wrong because as the size of the list grows, the number of steps needed to sort the list grows at an exponential rate, as the number of steps is equal to 2n for a list of size n. This indicates that the algorithm does not run in a reasonable amount of time. . | Right Answer: A and D . | . Why? . As the size of the list grows, the number of steps needed to sort the list grows at a linear rate, as the number of steps is equal to 10n for a list of size n, an example of a polynomial efficiency and indicates that the algorithm runs in a reasonable amount of time. The number of steps for this algorithm is equal to the length of the list squared, as the number of steps is equal to n2 for a list of size n, an example of polynomial efficiency and indicates that the algorithm runs in a reasonable amount of time. | .",
            "url": "https://linaawad1.github.io/linas-fastpages/final/2023/03/12/FinalQuizBlog.html",
            "relUrl": "/final/2023/03/12/FinalQuizBlog.html",
            "date": " • Mar 12, 2023"
        }
        
    
  
    
        ,"post16": {
            "title": "Unit 2.3 Extracting Information from Data, Pandas",
            "content": "Files To Get . Save this file to your _notebooks folder . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/2023-03-09-AP-unit2-3.ipynb . Save these files into a subfolder named files in your _notebooks folder . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/files/data.csv . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/files/grade.json . Save this image into a subfolder named images in your _notebooks folder . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/images/table_dataframe.png . Pandas and DataFrames . In this lesson we will be exploring data analysis using Pandas. . College Board talks about ideas like Tools. &quot;the ability to process data depends on users capabilities and their tools&quot; | Combining Data. &quot;combine county data sets&quot; | Status on Data&quot;determining the artist with the greatest attendance during a particular month&quot; | Data poses challenge. &quot;the need to clean data&quot;, &quot;incomplete data&quot; | . | . From Pandas Overview -- When working with tabular data, such as data stored in spreadsheets or databases, pandas is the right tool for you. pandas will help you to explore, clean, and process your data. In pandas, a data table is called a DataFrame. | . . &#39;&#39;&#39;Pandas is used to gather data sets through its DataFrames implementation&#39;&#39;&#39; import pandas as pd . Analyze . Cleaning Data . When looking at a data set, check to see what data needs to be cleaned. Examples include: . Missing Data Points | Invalid Data | Inaccurate Data | . Run the following code to see what needs to be cleaned . df = pd.read_json(&#39;files/grade.json&#39;) print(df) # What part of the data set needs to be cleaned? # From PBL learning, what is a good time to clean data? Hint, remember Garbage in, Garbage out? . Student ID Year in School GPA 0 123 12 3.57 1 246 10 4.00 2 578 12 2.78 3 469 11 3.45 4 324 Junior 4.75 5 313 20 3.33 6 145 12 2.95 7 167 10 3.90 8 235 9th Grade 3.15 9 nil 9 2.80 10 469 11 3.45 11 456 10 2.75 . df = pd.read_json(&#39;files/pokemon.json&#39;) print(df) # What part of the data set needs to be cleaned? # From PBL learning, what is a good time to clean data? Hint, remember Garbage in, Garbage out? . Pokemon Name Type Speed Legendary 0 Bulbasaur Grass 45 False 1 Ivysaur Grass 60 False 2 Charmander Fire 65 False 3 Squirtle Water 43 False 4 Caterpie Bug 45 False 5 Weedle Bug 50 False 6 Pidgey Flying 56 False 7 Spearow Flying 70 False 8 Pikachu Electric 90 False 10 Sandshrew Ground 40 False 11 Ekans Poison 55 False 12 Vulpix Fire 65 False 13 Jigglypuff Fairy 20 False 14 Diglett Ground 95 False 15 Meowth Normal 90 False 16 Entei Fire 100 True 17 Raikou Electric 115 True 18 Larvitar Rock 41 True 19 Lugia Psychic 110 True 20 Celebi Psychic 100 True . Extracting Info . Take a look at some features that the Pandas library has that extracts info from the dataset . DataFrame Extract Column . # print(df[[&#39;GPA&#39;]]) # print() # #try two columns and remove the index from print statement # print(df[[&#39;Student ID&#39;,&#39;GPA&#39;]].to_string(index=False)) . print(df[[&#39;Pokemon Name&#39;]]) print() #try two columns and remove the index from print statement print(df[[&#39;Pokemon Name&#39;,&#39;Speed&#39;]].to_string(index=False)) . Pokemon Name 0 Bulbasaur 1 Ivysaur 2 Charmander 3 Squirtle 4 Caterpie 5 Weedle 6 Pidgey 7 Spearow 8 Pikachu 10 Sandshrew 11 Ekans 12 Vulpix 13 Jigglypuff 14 Diglett 15 Meowth 16 Entei 17 Raikou 18 Larvitar 19 Lugia 20 Celebi Pokemon Name Speed Bulbasaur 45 Ivysaur 60 Charmander 65 Squirtle 43 Caterpie 45 Weedle 50 Pidgey 56 Spearow 70 Pikachu 90 Sandshrew 40 Ekans 55 Vulpix 65 Jigglypuff 20 Diglett 95 Meowth 90 Entei 100 Raikou 115 Larvitar 41 Lugia 110 Celebi 100 . DataFrame Sort . # print(df.sort_values(by=[&#39;GPA&#39;])) # print() # #sort the values in reverse order # print(df.sort_values(by=[&#39;GPA&#39;], ascending=False)) . print(df.sort_values(by=[&#39;Speed&#39;])) print() #sort the values in reverse order print(df.sort_values(by=[&#39;Speed&#39;], ascending=False)) . Pokemon Name Type Speed Legendary 13 Jigglypuff Fairy 20 False 10 Sandshrew Ground 40 False 18 Larvitar Rock 41 True 3 Squirtle Water 43 False 0 Bulbasaur Grass 45 False 4 Caterpie Bug 45 False 5 Weedle Bug 50 False 11 Ekans Poison 55 False 6 Pidgey Flying 56 False 1 Ivysaur Grass 60 False 12 Vulpix Fire 65 False 2 Charmander Fire 65 False 7 Spearow Flying 70 False 8 Pikachu Electric 90 False 15 Meowth Normal 90 False 14 Diglett Ground 95 False 16 Entei Fire 100 True 20 Celebi Psychic 100 True 19 Lugia Psychic 110 True 17 Raikou Electric 115 True Pokemon Name Type Speed Legendary 17 Raikou Electric 115 True 19 Lugia Psychic 110 True 20 Celebi Psychic 100 True 16 Entei Fire 100 True 14 Diglett Ground 95 False 8 Pikachu Electric 90 False 15 Meowth Normal 90 False 7 Spearow Flying 70 False 2 Charmander Fire 65 False 12 Vulpix Fire 65 False 1 Ivysaur Grass 60 False 6 Pidgey Flying 56 False 11 Ekans Poison 55 False 5 Weedle Bug 50 False 4 Caterpie Bug 45 False 0 Bulbasaur Grass 45 False 3 Squirtle Water 43 False 18 Larvitar Rock 41 True 10 Sandshrew Ground 40 False 13 Jigglypuff Fairy 20 False . DataFrame Selection or Filter . # print(df[df.GPA &gt; 3.00]) . print(df[df.Speed &gt; 50]) . Pokemon Name Type Speed Legendary 1 Ivysaur Grass 60 False 2 Charmander Fire 65 False 6 Pidgey Flying 56 False 7 Spearow Flying 70 False 8 Pikachu Electric 90 False 11 Ekans Poison 55 False 12 Vulpix Fire 65 False 14 Diglett Ground 95 False 15 Meowth Normal 90 False 16 Entei Fire 100 True 17 Raikou Electric 115 True 19 Lugia Psychic 110 True 20 Celebi Psychic 100 True . DataFrame Selection Max and Min . # print() # print(df[df.GPA == df.GPA.min()]) . print(df[df.Speed == df.Speed.max()]) print() print(df[df.Speed == df.Speed.min()]) . Pokemon Name Type Speed Legendary 17 Raikou Electric 115 True Pokemon Name Type Speed Legendary 13 Jigglypuff Fairy 20 False . other uses of my data . mean = df[&quot;Speed&quot;].mean() print(&quot;The average speed among these pokemon is&quot;, mean, &quot;.&quot;) . The average speed among these pokemon is 67.75 . . df.to_numpy() . array([[&#39;Bulbasaur&#39;, &#39;Grass&#39;, 45, &#39;False&#39;], [&#39;Ivysaur&#39;, &#39;Grass&#39;, 60, &#39;False&#39;], [&#39;Charmander&#39;, &#39;Fire&#39;, 65, &#39;False&#39;], [&#39;Squirtle&#39;, &#39;Water&#39;, 43, &#39;False&#39;], [&#39;Caterpie&#39;, &#39;Bug&#39;, 45, &#39;False&#39;], [&#39;Weedle&#39;, &#39;Bug&#39;, 50, &#39;False&#39;], [&#39;Pidgey&#39;, &#39;Flying&#39;, 56, &#39;False&#39;], [&#39;Spearow&#39;, &#39;Flying&#39;, 70, &#39;False&#39;], [&#39;Pikachu&#39;, &#39;Electric&#39;, 90, &#39;False&#39;], [&#39;Sandshrew&#39;, &#39;Ground&#39;, 40, &#39;False&#39;], [&#39;Ekans&#39;, &#39;Poison&#39;, 55, &#39;False&#39;], [&#39;Vulpix&#39;, &#39;Fire&#39;, 65, &#39;False&#39;], [&#39;Jigglypuff&#39;, &#39;Fairy&#39;, 20, &#39;False&#39;], [&#39;Diglett&#39;, &#39;Ground&#39;, 95, &#39;False&#39;], [&#39;Meowth&#39;, &#39;Normal&#39;, 90, &#39;False&#39;], [&#39;Entei&#39;, &#39;Fire&#39;, 100, &#39;True&#39;], [&#39;Raikou&#39;, &#39;Electric&#39;, 115, &#39;True&#39;], [&#39;Larvitar&#39;, &#39;Rock&#39;, 41, &#39;True&#39;], [&#39;Lugia&#39;, &#39;Psychic&#39;, 110, &#39;True&#39;], [&#39;Celebi&#39;, &#39;Psychic&#39;, 100, &#39;True&#39;]], dtype=object) . df.at[12, &#39;Speed&#39;] . 65 . df.at[8, &#39;Pokemon Name&#39;] . &#39;Pikachu&#39; . Create your own DataFrame . Using Pandas allows you to create your own DataFrame in Python. . Python Dictionary to Pandas DataFrame . import pandas as pd #the data can be stored as a python dictionary dict = { &quot;calories&quot;: [420, 380, 390, 290], &quot;duration&quot;: [50, 40, 45, 35] } #stores the data in a data frame print(&quot;-Dict_to_DF&quot;) df = pd.DataFrame(dict) print(df) print(&quot;-Dict_to_DF_labels--&quot;) #or with the index argument, you can label rows. df = pd.DataFrame(dict, index = [&quot;day1&quot;, &quot;day2&quot;, &quot;day3&quot;, &quot;day4&quot;]) print(df) . -Dict_to_DF calories duration 0 420 50 1 380 40 2 390 45 3 290 35 -Dict_to_DF_labels-- calories duration day1 420 50 day2 380 40 day3 390 45 day4 290 35 . Examine DataFrame Rows . print(&quot;-Examine Selected Rows&quot;) #use a list for multiple labels: print(df.loc[[&quot;day1&quot;, &quot;day3&quot;]]) #refer to the row index: print(&quot;--Examine Single Row--&quot;) print(df.loc[&quot;day1&quot;]) . -Examine Selected Rows calories duration day1 420 50 day3 390 45 --Examine Single Row-- calories 420 duration 50 Name: day1, dtype: int64 . Pandas DataFrame Information . print(df.info()) . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; Index: 4 entries, day1 to day4 Data columns (total 2 columns): # Column Non-Null Count Dtype -- -- 0 calories 4 non-null int64 1 duration 4 non-null int64 dtypes: int64(2) memory usage: 268.0+ bytes None . Example of larger data set . Pandas can read CSV and many other types of files, run the following code to see more features with a larger data set . import pandas as pd #read csv and sort &#39;Duration&#39; largest to smallest df = pd.read_csv(&#39;files/data.csv&#39;).sort_values(by=[&#39;Duration&#39;], ascending=False) print(&quot;--Duration Top 10&quot;) print(df.head(10)) print(&quot;--Duration Bottom 10&quot;) print(df.tail(10)) . --Duration Top 10 Duration Pulse Maxpulse Calories 69 300 108 143 1500.2 79 270 100 131 1729.0 109 210 137 184 1860.4 60 210 108 160 1376.0 106 180 90 120 800.3 90 180 101 127 600.1 65 180 90 130 800.4 61 160 110 137 1034.4 62 160 109 135 853.0 67 150 107 130 816.0 --Duration Bottom 10 Duration Pulse Maxpulse Calories 68 20 106 136 110.4 100 20 95 112 77.7 89 20 83 107 50.3 135 20 136 156 189.0 94 20 150 171 127.4 95 20 151 168 229.4 139 20 141 162 222.4 64 20 110 130 131.4 112 15 124 139 124.2 93 15 80 100 50.5 . APIs are a Source for Writing Programs with Data . 3rd Party APIs are a great source for creating Pandas Data Frames. . Data can be fetched and resulting json can be placed into a Data Frame | Observe output, this looks very similar to a Database | . &#39;&#39;&#39;Pandas can be used to analyze data&#39;&#39;&#39; import pandas as pd import requests def fetch(): &#39;&#39;&#39;Obtain data from an endpoint&#39;&#39;&#39; url = &quot;https://flask.nighthawkcodingsociety.com/api/covid/&quot; fetch = requests.get(url) json = fetch.json() # filter data for requirement df = pd.DataFrame(json[&#39;countries_stat&#39;]) # filter endpoint for country stats print(df.loc[0:5, &#39;country_name&#39;:&#39;deaths&#39;]) # show row 0 through 5 and columns country_name through deaths fetch() . country_name cases deaths 0 USA 82,649,779 1,018,316 1 India 43,057,545 522,193 2 Brazil 30,345,654 662,663 3 France 28,244,977 145,020 4 Germany 24,109,433 134,624 5 UK 21,933,206 173,352 . Hacks . AP Prep . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | In blog add College Board practice problems for 2.3. | . The next 4 weeks, Teachers want you to improve your understanding of data. Look at the blog and others on Unit 2. Your intention is to find some things to differentiate your individual College Board project. . Create or Find your own dataset. The suggestion is to use a JSON file, integrating with your PBL project would be Fambulous. | . When choosing a data set, think about the following:- Does it have a good sample size? - Is there bias in the data? - Does the data set need to be cleaned? - What is the purpose of the data set? - ... . Continue this Blog using Pandas extract info from that dataset (ex. max, min, mean, median, mode, etc.) | . Hack Helpers . Here is how Mort started on this assignment by asking ChatGPT ... Regarding Python Pandas, what are some data sets that would be good for learning Pandas? . There are many data sets that are suitable for learning pandas, depending on your interests and the skills you want to develop. Here are some suggestions:- Titanic Dataset: This is a classic dataset for data analysis and machine learning, and is often used as an introduction to pandas. The dataset contains information about passengers on the Titanic, including their demographics, ticket class, and survival status. . Iris Dataset: This is another classic dataset that is often used in machine learning and data analysis courses. The dataset contains information about iris flowers, including their sepal length, sepal width, petal length, and petal width. . | NBA Player Stats: This dataset contains information about NBA players, including their stats for various games, their positions, and their salaries. It is a great dataset for learning how to clean and manipulate data using pandas. . | Housing Prices Dataset: This dataset contains information about housing prices in a particular city or region, including variables such as the number of bedrooms, square footage, and price. It is a great dataset for learning how to manipulate and analyze numerical data using pandas. . | COVID-19 Dataset: This dataset contains information about the COVID-19 pandemic, including the number of cases, deaths, and recoveries in various countries and regions. It is a great dataset for learning how to manipulate and analyze time-series data using pandas. . | World Bank Dataset: This dataset contains information about economic indicators from various countries, such as GDP, population, and poverty rates. It is a great dataset for learning how to manipulate and analyze large datasets using pandas. . | . | These are just a few examples of the many datasets that are suitable for learning pandas. The best dataset for you will depend on your interests and the specific skills you want to develop. . Follow up question, &quot;where can I find Titanic data set?&quot; . | The Titanic dataset is a popular dataset for data analysis and machine learning, and it can be found on various websites and data repositories. Here are a few places where you can find the Titanic dataset:- Kaggle: The Titanic dataset is available on Kaggle, which is a popular platform for data scientists and machine learning enthusiasts. You can download the dataset from the Kaggle website after creating an account. . UCI Machine Learning Repository: The Titanic dataset is also available on the UCI Machine Learning Repository, which is a collection of datasets that are commonly used for machine learning research. You can download the dataset from the UCI Machine Learning Repository website. . | Seaborn library: If you have the Seaborn library installed in your Python environment, you can load the Titanic dataset directly from the library using the following code: . import seaborn as sns titanic_data = sns.load_dataset(&#39;titanic&#39;) . | . | . Titanic Data . Look at a sample of data. . import seaborn as sns # Load the titanic dataset titanic_data = sns.load_dataset(&#39;titanic&#39;) print(&quot;Titanic Data&quot;) print(titanic_data.columns) # titanic data set print(titanic_data[[&#39;survived&#39;,&#39;pclass&#39;, &#39;sex&#39;, &#39;age&#39;, &#39;sibsp&#39;, &#39;parch&#39;, &#39;class&#39;, &#39;fare&#39;, &#39;embark_town&#39;]]) # look at selected columns . Titanic Data Index([&#39;survived&#39;, &#39;pclass&#39;, &#39;sex&#39;, &#39;age&#39;, &#39;sibsp&#39;, &#39;parch&#39;, &#39;fare&#39;, &#39;embarked&#39;, &#39;class&#39;, &#39;who&#39;, &#39;adult_male&#39;, &#39;deck&#39;, &#39;embark_town&#39;, &#39;alive&#39;, &#39;alone&#39;], dtype=&#39;object&#39;) survived pclass sex age sibsp parch class fare 0 0 3 male 22.0 1 0 Third 7.2500 1 1 1 female 38.0 1 0 First 71.2833 2 1 3 female 26.0 0 0 Third 7.9250 3 1 1 female 35.0 1 0 First 53.1000 4 0 3 male 35.0 0 0 Third 8.0500 .. ... ... ... ... ... ... ... ... 886 0 2 male 27.0 0 0 Second 13.0000 887 1 1 female 19.0 0 0 First 30.0000 888 0 3 female NaN 1 2 Third 23.4500 889 1 1 male 26.0 0 0 First 30.0000 890 0 3 male 32.0 0 0 Third 7.7500 embark_town 0 Southampton 1 Cherbourg 2 Southampton 3 Southampton 4 Southampton .. ... 886 Southampton 887 Southampton 888 Southampton 889 Cherbourg 890 Queenstown [891 rows x 9 columns] . Use Pandas to clean the data. Most analysis, like Machine Learning or even Pandas in general like data to be in standardized format. This is called &#39;Training&#39; or &#39;Cleaning&#39; data. . # Preprocess the data from sklearn.preprocessing import OneHotEncoder td = titanic_data td.drop([&#39;alive&#39;, &#39;who&#39;, &#39;adult_male&#39;, &#39;class&#39;, &#39;embark_town&#39;, &#39;deck&#39;], axis=1, inplace=True) td.dropna(inplace=True) td[&#39;sex&#39;] = td[&#39;sex&#39;].apply(lambda x: 1 if x == &#39;male&#39; else 0) td[&#39;alone&#39;] = td[&#39;alone&#39;].apply(lambda x: 1 if x == True else 0) # Encode categorical variables enc = OneHotEncoder(handle_unknown=&#39;ignore&#39;) enc.fit(td[[&#39;embarked&#39;]]) onehot = enc.transform(td[[&#39;embarked&#39;]]).toarray() cols = [&#39;embarked_&#39; + val for val in enc.categories_[0]] td[cols] = pd.DataFrame(onehot) td.drop([&#39;embarked&#39;], axis=1, inplace=True) td.dropna(inplace=True) print(td) . survived pclass sex age sibsp parch fare alone embarked_C 0 0 3 1 22.0 1 0 7.2500 0 0.0 1 1 1 0 38.0 1 0 71.2833 0 1.0 2 1 3 0 26.0 0 0 7.9250 1 0.0 3 1 1 0 35.0 1 0 53.1000 0 0.0 4 0 3 1 35.0 0 0 8.0500 1 0.0 .. ... ... ... ... ... ... ... ... ... 705 0 2 1 39.0 0 0 26.0000 1 0.0 706 1 2 0 45.0 0 0 13.5000 1 0.0 707 1 1 1 42.0 0 0 26.2875 1 0.0 708 1 1 0 22.0 0 0 151.5500 1 0.0 710 1 1 0 24.0 0 0 49.5042 1 1.0 embarked_Q embarked_S 0 0.0 1.0 1 0.0 0.0 2 0.0 1.0 3 0.0 1.0 4 0.0 1.0 .. ... ... 705 0.0 1.0 706 0.0 1.0 707 1.0 0.0 708 0.0 1.0 710 0.0 0.0 [564 rows x 11 columns] . The result of &#39;Training&#39; data is making it easier to analyze or make conclusions. In looking at the Titanic, as you clean you would probably want to make assumptions on likely chance of survival. . This would involve analyzing various factors (such as age, gender, class, etc.) that may have affected a person&#39;s chances of survival, and using that information to make predictions about whether an individual would have survived or not. . Data description:- Survival - Survival (0 = No; 1 = Yes). Not included in test.csv file. - Pclass - Passenger Class (1 = 1st; 2 = 2nd; 3 = 3rd) . Name - Name | Sex - Sex | Age - Age | Sibsp - Number of Siblings/Spouses Aboard | Parch - Number of Parents/Children Aboard | Ticket - Ticket Number | Fare - Passenger Fare | Cabin - Cabin | Embarked - Port of Embarkation (C = Cherbourg; Q = Queenstown; S = Southampton) | . | Perished Mean/Average . | . print(titanic_data.query(&quot;survived == 0&quot;).mean()) . survived 0.000000 pclass 2.464072 sex 0.844311 age 31.073353 sibsp 0.562874 parch 0.398204 fare 24.835902 alone 0.616766 embarked_C 0.185629 embarked_Q 0.038922 embarked_S 0.775449 dtype: float64 . Survived Mean/Average | . print(td.query(&quot;survived == 1&quot;).mean()) . survived 1.000000 pclass 1.878261 sex 0.326087 age 28.481522 sibsp 0.504348 parch 0.508696 fare 50.188806 alone 0.456522 embarked_C 0.152174 embarked_Q 0.034783 embarked_S 0.813043 dtype: float64 . Survived Max and Min Stats . print(td.query(&quot;survived == 1&quot;).max()) print(td.query(&quot;survived == 1&quot;).min()) . survived 1.0000 pclass 3.0000 sex 1.0000 age 80.0000 sibsp 4.0000 parch 5.0000 fare 512.3292 alone 1.0000 embarked_C 1.0000 embarked_Q 1.0000 embarked_S 1.0000 dtype: float64 survived 1.00 pclass 1.00 sex 0.00 age 0.75 sibsp 0.00 parch 0.00 fare 0.00 alone 0.00 embarked_C 0.00 embarked_Q 0.00 embarked_S 0.00 dtype: float64 . Machine Learning . From Tutorials Point%20is,a%20consistence%20interface%20in%20Python). Scikit-learn (Sklearn) is the most useful and robust library for machine learning in Python. It provides a selection of efficient tools for machine learning and statistical modeling including classification, regression, clustering and dimensionality reduction via a consistence interface in Python.&gt; Description from ChatGPT. The Titanic dataset is a popular dataset for data analysis and machine learning. In the context of machine learning, accuracy refers to the percentage of correctly classified instances in a set of predictions. In this case, the testing data is a subset of the original Titanic dataset that the decision tree model has not seen during training......After training the decision tree model on the training data, we can evaluate its performance on the testing data by making predictions on the testing data and comparing them to the actual outcomes. The accuracy of the decision tree classifier on the testing data tells us how well the model generalizes to new data that it hasn&#39;t seen before......For example, if the accuracy of the decision tree classifier on the testing data is 0.8 (or 80%), this means that 80% of the predictions made by the model on the testing data were correct....Chance of survival could be done using various machine learning techniques, including decision trees, logistic regression, or support vector machines, among others. . Code Below prepares data for further analysis and provides an Accuracy. IMO, you would insert a new passenger and predict survival. Datasets could be used on various factors like prediction if a player will hit a Home Run, or a Stock will go up or down. Decision Trees, prediction by a piecewise constant approximation. - Logistic Regression, the probabilities describing the possible outcomes. | . | . from sklearn.model_selection import train_test_split from sklearn.tree import DecisionTreeClassifier from sklearn.linear_model import LogisticRegression from sklearn.metrics import accuracy_score # Split arrays or matrices into random train and test subsets. X = td.drop(&#39;survived&#39;, axis=1) y = td[&#39;survived&#39;] X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42) # Train a decision tree classifier dt = DecisionTreeClassifier() dt.fit(X_train, y_train) # Test the model y_pred = dt.predict(X_test) accuracy = accuracy_score(y_test, y_pred) print(&#39;DecisionTreeClassifier Accuracy:&#39;, accuracy) # Train a logistic regression model logreg = LogisticRegression() logreg.fit(X_train, y_train) # Test the model y_pred = logreg.predict(X_test) accuracy = accuracy_score(y_test, y_pred) print(&#39;LogisticRegression Accuracy:&#39;, accuracy) . DecisionTreeClassifier Accuracy: 0.7411764705882353 LogisticRegression Accuracy: 0.788235294117647 . /Users/linaalsheikh-eid/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_logistic.py:814: ConvergenceWarning: lbfgs failed to converge (status=1): STOP: TOTAL NO. of ITERATIONS REACHED LIMIT. Increase the number of iterations (max_iter) or scale the data as shown in: https://scikit-learn.org/stable/modules/preprocessing.html Please also refer to the documentation for alternative solver options: https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression n_iter_i = _check_optimize_result( .",
            "url": "https://linaawad1.github.io/linas-fastpages/2023/03/09/AP-unit2-3.html",
            "relUrl": "/2023/03/09/AP-unit2-3.html",
            "date": " • Mar 9, 2023"
        }
        
    
  
    
        ,"post17": {
            "title": "Unit 2.2 Data Compression, Images",
            "content": "Enumerate &quot;Data&quot; Big Idea from College Board . Some of the big ideas and vocab that you observe, talk about it with a partner ... . &quot;Data compression is the reduction of the number of bits needed to represent data&quot; | &quot;Data compression is used to save transmission time and storage space.&quot; | &quot;lossy data can reduce data but the original data is not recovered&quot; | &quot;lossless data lets you restore and recover&quot; | . The Image Lab Project contains a plethora of College Board Unit 2 data concepts. Working with Images provides many opportunities for compression and analyzing size. . Image Files and Size . Here are some Images Files. Download these files, load them into images directory under _notebooks in your Blog. . Clouds Impression | Lassen Volcano | Green Square | . Describe some of the meta data and considerations when managing Image files. Describe how these relate to Data Compression ...&lt;/p&gt; meta deta is data that gives context and a title to other forms of data. | File Type, PNG and JPG are two types used in this lab Different file types like png and jpg are meant for different purposes when holding an image. There are different patterns that the file types analyze and use for data compression. | . | Size, height and width, number of pixels The number of pixels in an image will determine the resolution of the image. The more pixels, the more details that create a higher resolution. The size and width also determine how many pixels are needed to make a clear picture. So obviously, a larger picture would need more pixels in order to have a good resolution. | . | Visual perception, lossy compression Similar to what I mentioned before, the visual perception will be much clearer if there is a higher resolution. However, lossy compression can cause data to be lost. If there is data lost the perception can be altered and the resolution can go down. | . | . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; Displaying images in Python Jupyter notebook . Python Libraries and Concepts used for Jupyter and Files/Directories . IPython . Support visualization of data in Jupyter notebooks. Visualization is specific to View, for the web visualization needs to be converted to HTML. . pathlib . File paths are different on Windows versus Mac and Linux. This can cause problems in a project as you work and deploy on different Operating Systems (OS&#39;s), pathlib is a solution to this problem. &lt;/p&gt; What are commands you use in terminal to access files? we use commands like cd, ls, etc. | . | What are the command you use in Windows terminal to access files? Windows also use cd, dir, etc. | . | What are some of the major differences? One of the major differences we talked about during the lecture was the use of the forward slash in macbook terminals and the use of a backward slash for separating windows directories. | . | . &lt;/blockquote&gt; Provide what you observed, struggled with, or leaned while playing with this code.&lt;/p&gt; Why is path a big deal when working with images? Path is a big deal when working with images because the image must be in the right directory or file in order to be properly integrated based on the type of image it is. Also, there must be a way to see where the image is coming from and how to access it. | . | How does the meta data source and label relate to Unit 5 topics? I am not exactly sure but I am thinking it might have something to do with crowd sourcing. It kind of guides what data is being collected and outlines the whole dataset and outside information | . | Look up IPython, describe why this is interesting in Jupyter Notebooks for both Pandas and Images? From what I understand, IPython is a way to make using python easier and more efficient to use. I think this is interesting in Jupyter Notebooks for both Pandas and Images because it is a quicker way to edit and play with the rendering of images from the code itself. | . | . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; from IPython.display import Image, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;}, {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Smiley Face&quot;, &#39;file&#39;: &quot;smiley.png&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images def image_display(images): for image in images: display(Image(filename=image[&#39;filename&#39;])) # Run this as standalone tester to see sample data printed in Jupyter terminal if __name__ == &quot;__main__&quot;: # print parameter supplied image green_square = image_data(images=[{&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}]) image_display(green_square) # display default images from image_data() default_images = image_data() image_display(default_images) . Reading and Encoding Images (2 implementations follow) . PIL (Python Image Library) . Pillow or PIL provides the ability to work with images in Python. Geeks for Geeks shows some ideas on working with images. - notes on providing images&lt;/p&gt; &quot;PIL is the Python Imaging Library which provides the python interpreter with image editing capabilities.&quot; | This website shows the ways to rotate an image, crop it, and display it in multiple ways. | it also shows how to use PIL to import images and use PIL to edit these images in certain ways. | . &lt;/blockquote&gt; base64 . Image formats (JPG, PNG) are often called *Binary File formats, it is difficult to pass these over HTTP. Thus, base64 converts binary encoded data (8-bit, ASCII/Unicode) into a text encoded scheme (24 bits, 6-bit Base64 digits). Thus base64 is used to transport and embed binary images into textual assets such as HTML and CSS.- How is Base64 similar or different to Binary and Hexadecimal? 64 characters per symbol. In Hexadecimal there are 10 characters and in binary there are 2 characters per position. Use it to tranfer things into our apis if we have images?&lt;/p&gt; - Base64 is especially similar to binary and hexadecimal because they all represent how many characters are used in the name. It is also different than the others because it obviously uses 64 characters and binary uses 2 characters and hexadecimal has 10 characters. We can use it to transfer things into our apis by utilizing the characters to create a text format. . Translate first 3 letters of your name to Base64. The first three letters of my name, &quot;Lin&quot; can be translated to base64 as 001011, 100010, and 100111 | . | . &lt;/blockquote&gt; numpy . Numpy is described as &quot;The fundamental package for scientific computing with Python&quot;. In the Image Lab, a Numpy array is created from the image data in order to simplify access and change to the RGB values of the pixels, converting pixels to grey scale. . io, BytesIO . Input and Output (I/O) is a fundamental of all Computer Programming. Input/output (I/O) buffering is a technique used to optimize I/O operations. In large quantities of data, how many frames of input the server currently has queued is the buffer. In this example, there is a very large picture that lags.&lt;/p&gt; Where have you been a consumer of buffering? I have been a consumer of buffering on streaming services when a file is loading or about to be played. While I wait it buffers and I am the consumer. | . | From your consumer experience, what effects have you experienced from buffering? From buffering more issues can be caused. For example, I am thinking that if many people on the wifi have things buffering, it will only make things worse and create deeper issues. | . | How do these effects apply to images? The images may not ever render or load and it will cause issues in the system that are more deeply rooted than just the image being shown. | . | . &lt;/blockquote&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; Data Structures, Imperative Programming Style, and working with Images . Introduction to creating meta data and manipulating images. Look at each procedure and explain the the purpose and results of this program. Add any insights or challenges as you explored this program.&lt;/p&gt; Does this code seem like a series of steps are being performed? This code seems like a series of steps being preformed because there must be steps in order to change how the image is rendered. | . | Describe Grey Scale algorithm in English or Pseudo code? From what I understand, in order to grey scale images, we must average all the colors given, like red, green, and blue. You average these pixels in order to create the grey and focusing on one will tint the color towards one of the colors | . | Describe scale image? What is before and after on pixels in three images? Scale image means changing the perception of the image and it also comes with altering the pixels of the image and can be connected with the change in color. In the images, the pixels change by color but it remains by pixel. | . | Is scale image a type of compression? If so, line it up with College Board terms described? Scale image is a type of compression because it changes the original image to what the scale wants and alters the different pixels. | . | . &lt;/blockquote&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;}, {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Smiley Face&quot;, &#39;file&#39;: &quot;smiley.png&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images # Large image scaled to baseWidth of 320 def scale_image(img): baseWidth = 320 scalePercent = (baseWidth/float(img.size[0])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) # PIL image converted to base64 def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() # Set Properties of Image, Scale, and convert to Base64 def image_management(image): # path of static images is defaulted # Image open return PIL image object img = pilImage.open(image[&#39;filename&#39;]) # Python Image Library operations image[&#39;format&#39;] = img.format image[&#39;mode&#39;] = img.mode image[&#39;size&#39;] = img.size # Scale the Image img = scale_image(img) image[&#39;pil&#39;] = img image[&#39;scaled_size&#39;] = img.size # Scaled HTML image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) # Create Grey Scale Base64 representation of Image def image_management_add_html_grey(image): # Image open return PIL image object img = image[&#39;pil&#39;] format = image[&#39;format&#39;] img_data = img.getdata() # Reference https://www.geeksforgeeks.org/python-pil-image-getdata/ image[&#39;data&#39;] = np.array(img_data) # PIL image to numpy array image[&#39;gray_data&#39;] = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in image[&#39;data&#39;]: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: image[&#39;gray_data&#39;].append((average, average, average, pixel[3])) # PNG format else: image[&#39;gray_data&#39;].append((average, average, average)) # end for loop for pixels img.putdata(image[&#39;gray_data&#39;]) image[&#39;html_grey&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, format) # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: # Use numpy to concatenate two arrays images = image_data() # Display meta data, scaled view, and grey scale for each image for image in images: image_management(image) print(&quot;- meta data --&quot;) print(image[&#39;label&#39;]) print(image[&#39;source&#39;]) print(image[&#39;format&#39;]) print(image[&#39;mode&#39;]) print(&quot;Original size: &quot;, image[&#39;size&#39;]) print(&quot;Scaled size: &quot;, image[&#39;scaled_size&#39;]) print(&quot;-- original image --&quot;) display(HTML(image[&#39;html&#39;])) print(&quot; grey image -&quot;) image_management_add_html_grey(image) display(HTML(image[&#39;html_grey&#39;])) print() . - meta data -- Green Square Internet PNG RGBA Original size: (16, 16) Scaled size: (320, 320) -- original image -- . grey image - . - meta data -- Clouds Impression Internet PNG RGBA Original size: (320, 234) Scaled size: (320, 234) -- original image -- . grey image - . - meta data -- Lassen Volcano Internet JPEG RGB Original size: (2792, 2094) Scaled size: (320, 240) -- original image -- . grey image - . - meta data -- Smiley Face Internet PNG RGBA Original size: (970, 740) Scaled size: (320, 244) -- original image -- . grey image - . . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;}, {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Smiley Face&quot;, &#39;file&#39;: &quot;smiley.png&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images # Large image scaled to baseWidth of 320 def scale_image(img): baseWidth = 320 scalePercent = (baseWidth/float(img.size[0])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) # PIL image converted to base64 def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() # Set Properties of Image, Scale, and convert to Base64 def image_management(image): # path of static images is defaulted # Image open return PIL image object img = pilImage.open(image[&#39;filename&#39;]) # Python Image Library operations image[&#39;format&#39;] = img.format image[&#39;mode&#39;] = img.mode image[&#39;size&#39;] = img.size # Scale the Image img = scale_image(img) image[&#39;pil&#39;] = img image[&#39;scaled_size&#39;] = img.size # Scaled HTML image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) # Create Grey Scale Base64 representation of Image def image_management_add_html_red(image): # Image open return PIL image object img = image[&#39;pil&#39;] format = image[&#39;format&#39;] img_data = img.getdata() # Reference https://www.geeksforgeeks.org/python-pil-image-getdata/ image[&#39;data&#39;] = np.array(img_data) # PIL image to numpy array image[&#39;red_data&#39;] = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in image[&#39;data&#39;]: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: image[&#39;red_data&#39;].append((average, 0, 0, pixel[3])) # PNG format else: image[&#39;red_data&#39;].append((average, 0, 0)) # end for loop for pixels img.putdata(image[&#39;red_data&#39;]) image[&#39;html_red&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, format) # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: # Use numpy to concatenate two arrays images = image_data() # Display meta data, scaled view, and grey scale for each image for image in images: image_management(image) print(&quot;- meta data --&quot;) print(image[&#39;label&#39;]) print(image[&#39;source&#39;]) print(image[&#39;format&#39;]) print(image[&#39;mode&#39;]) print(&quot;Original size: &quot;, image[&#39;size&#39;]) print(&quot;Scaled size: &quot;, image[&#39;scaled_size&#39;]) print(&quot;-- original image --&quot;) display(HTML(image[&#39;html&#39;])) print(&quot; red image -&quot;) image_management_add_html_red(image) display(HTML(image[&#39;html_red&#39;])) print() . - meta data -- Green Square Internet PNG RGBA Original size: (16, 16) Scaled size: (320, 320) -- original image -- . red image - . - meta data -- Clouds Impression Internet PNG RGBA Original size: (320, 234) Scaled size: (320, 234) -- original image -- . red image - . - meta data -- Lassen Volcano Internet JPEG RGB Original size: (2792, 2094) Scaled size: (320, 240) -- original image -- . red image - . - meta data -- Smiley Face Internet PNG RGBA Original size: (970, 740) Scaled size: (320, 244) -- original image -- . red image - . . Data Structures and OOP . Most data structures classes require Object Oriented Programming (OOP). Since this class is lined up with a College Course, OOP will be talked about often. Functionality in remainder of this Blog is the same as the prior implementation. Highlight some of the key difference you see between imperative and oop styles. . Read imperative and object-oriented programming on Wikipedia | Consider how data is organized in two examples, in relations to procedures | Look at Parameters in Imperative and Self in OOP | . Additionally, review all the imports in these three demos. Create a definition of their purpose, specifically these .. . PIL:Python Imaging Library, which is a popular open-source library for working with digital images in Python. The library provides many useful functions for manipulating and processing images, such as resizing, cropping, filtering, and more. - numpy: is described as &quot;The fundamental package for scientific computing with Python&quot;. In the Image Lab, a Numpy array is created from the image data in order to simplify access and change to the RGB values of the pixels, converting pixels to grey scale. | base64: The purpose of base64 is to encode binary data as printable text. | . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np class Image_Data: def __init__(self, source, label, file, path, baseWidth=320): self._source = source # variables with self prefix become part of the object, self._label = label self._file = file self._filename = path / file # file with path self._baseWidth = baseWidth # Open image and scale to needs self._img = pilImage.open(self._filename) self._format = self._img.format self._mode = self._img.mode self._originalSize = self.img.size self.scale_image() self._html = self.image_to_html(self._img) self._html_grey = self.image_to_html_grey() @property def source(self): return self._source @property def label(self): return self._label @property def file(self): return self._file @property def filename(self): return self._filename @property def img(self): return self._img @property def format(self): return self._format @property def mode(self): return self._mode @property def originalSize(self): return self._originalSize @property def size(self): return self._img.size @property def html(self): return self._html @property def html_grey(self): return self._html_grey # Large image scaled to baseWidth of 320 def scale_image(self): scalePercent = (self._baseWidth/float(self._img.size[0])) scaleHeight = int((float(self._img.size[1])*float(scalePercent))) scale = (self._baseWidth, scaleHeight) self._img = self._img.resize(scale) # PIL image converted to base64 def image_to_html(self, img): with BytesIO() as buffer: img.save(buffer, self._format) return &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % base64.b64encode(buffer.getvalue()).decode() # Create Grey Scale Base64 representation of Image def image_to_html_grey(self): img_grey = self._img numpy = np.array(self._img.getdata()) # PIL image to numpy array grey_data = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in numpy: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: grey_data.append((average, average, average, pixel[3])) # PNG format else: grey_data.append((average, average, average)) # end for loop for pixels img_grey.putdata(grey_data) return self.image_to_html(img_grey) # prepares a series of images, provides expectation for required contents def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;} ] return path, images # turns data into objects def image_objects(): id_Objects = [] path, images = image_data() for image in images: id_Objects.append(Image_Data(source=image[&#39;source&#39;], label=image[&#39;label&#39;], file=image[&#39;file&#39;], path=path, )) return id_Objects # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: for ido in image_objects(): # ido is an Imaged Data Object print(&quot;- meta data --&quot;) print(ido.label) print(ido.source) print(ido.file) print(ido.format) print(ido.mode) print(&quot;Original size: &quot;, ido.originalSize) print(&quot;Scaled size: &quot;, ido.size) print(&quot;-- scaled image --&quot;) display(HTML(ido.html)) print(&quot; grey image &quot;) display(HTML(ido.html_grey)) print() . - meta data -- Green Square Internet green-square-16.png PNG RGBA Original size: (16, 16) Scaled size: (320, 320) -- scaled image -- . grey image . - meta data -- Clouds Impression Peter Carolin clouds-impression.png PNG RGBA Original size: (320, 234) Scaled size: (320, 234) -- scaled image -- . grey image . - meta data -- Lassen Volcano Peter Carolin lassen-volcano.jpg JPEG RGB Original size: (2792, 2094) Scaled size: (320, 240) -- scaled image -- . grey image . . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np class Image_Data: def __init__(self, source, label, file, path, baseWidth=320): self._source = source # variables with self prefix become part of the object, self._label = label self._file = file self._filename = path / file # file with path self._baseWidth = baseWidth # Open image and scale to needs self._img = pilImage.open(self._filename) self._format = self._img.format self._mode = self._img.mode self._originalSize = self.img.size self.scale_image() self._html = self.image_to_html(self._img) self._html_blue = self.image_to_html_blue() @property def source(self): return self._source @property def label(self): return self._label @property def file(self): return self._file @property def filename(self): return self._filename @property def img(self): return self._img @property def format(self): return self._format @property def mode(self): return self._mode @property def originalSize(self): return self._originalSize @property def size(self): return self._img.size @property def html(self): return self._html @property def html_blue(self): return self._html_blue # Large image scaled to baseWidth of 320 def scale_image(self): scalePercent = (self._baseWidth/float(self._img.size[0])) scaleHeight = int((float(self._img.size[1])*float(scalePercent))) scale = (self._baseWidth, scaleHeight) self._img = self._img.resize(scale) # PIL image converted to base64 def image_to_html(self, img): with BytesIO() as buffer: img.save(buffer, self._format) return &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % base64.b64encode(buffer.getvalue()).decode() # Create Grey Scale Base64 representation of Image def image_to_html_blue(self): img_blue = self._img numpy = np.array(self._img.getdata()) # PIL image to numpy array blue_data = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in numpy: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: blue_data.append((0, 0, average, pixel[3])) # PNG format else: blue_data.append((0, 0, average)) # end for loop for pixels img_blue.putdata(blue_data) return self.image_to_html(img_blue) # prepares a series of images, provides expectation for required contents def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;} ] return path, images # turns data into objects def image_objects(): id_Objects = [] path, images = image_data() for image in images: id_Objects.append(Image_Data(source=image[&#39;source&#39;], label=image[&#39;label&#39;], file=image[&#39;file&#39;], path=path, )) return id_Objects # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: for ido in image_objects(): # ido is an Imaged Data Object print(&quot;- meta data --&quot;) print(ido.label) print(ido.source) print(ido.file) print(ido.format) print(ido.mode) print(&quot;Original size: &quot;, ido.originalSize) print(&quot;Scaled size: &quot;, ido.size) print(&quot;-- scaled image --&quot;) display(HTML(ido.html)) print(&quot; blue image &quot;) display(HTML(ido.html_blue)) print() . - meta data -- Green Square Internet green-square-16.png PNG RGBA Original size: (16, 16) Scaled size: (320, 320) -- scaled image -- . blue image . - meta data -- Clouds Impression Peter Carolin clouds-impression.png PNG RGBA Original size: (320, 234) Scaled size: (320, 234) -- scaled image -- . blue image - meta data -- Lassen Volcano Peter Carolin lassen-volcano.jpg JPEG RGB Original size: (2792, 2094) Scaled size: (320, 240) -- scaled image -- . blue image . . Hacks . Early Seed award . Add this Blog to you own Blogging site. | In the Blog add a Happy Face image. | Have Happy Face Image open when Tech Talk starts, running on localhost. Don&#39;t tell anyone. Show to Teacher. | . AP Prep . In the Blog add notes and observations on each code cell that request an answer. | In blog add College Board practice problems for 2.3 | Choose 2 images, one that will more likely result in lossy data compression and one that is more likely to result in lossless data compression. Explain. | . Project Addition . If your project has images in it, try to implement an image change that has a purpose. (Ex. An item that has been sold out could become gray scale) | . Pick a programming paradigm and solve some of the following ... . Numpy, manipulating pixels. As opposed to Grey Scale treatment, pick a couple of other types like red scale, green scale, or blue scale. We want you to be manipulating pixels in the image. | Binary and Hexadecimal reports. Convert and produce pixels in binary and Hexadecimal and display. | Compression and Sizing of images. Look for insights into compression Lossy and Lossless. Look at PIL library and see if there are other things that can be done. | There are many effects you can do as well with PIL. Blur the image or write Meta Data on screen, aka Title, Author and Image size. | . from PIL import Image, ImageFilter #Open existing image OriImage = Image.open(&#39;images/smiley.png&#39;) OriImage.show() blurImage = OriImage.filter(ImageFilter.BLUR) blurImage.show() #Save blurImage blurImage.show(&#39;images/smiley.png&#39;) . &lt;/div&gt; . .",
            "url": "https://linaawad1.github.io/linas-fastpages/2023/03/07/AP-unit2-2.html",
            "relUrl": "/2023/03/07/AP-unit2-2.html",
            "date": " • Mar 7, 2023"
        }
        
    
  

  
  

  

  
  

  

  
  

  
      ,"page5": {
          "title": "Spin the Wheel",
          "content": "&lt;!DOCTYPE html&gt; . SPIN THE WHEEL . Spin the Wheel .",
          "url": "https://linaawad1.github.io/linas-fastpages/wheel/",
          "relUrl": "/wheel/",
          "date": ""
      }
      
  

  
  

  
  

  
  

  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://linaawad1.github.io/linas-fastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}